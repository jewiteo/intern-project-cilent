{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col, DropdownButton, Dropdown } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport InputBase from '@material-ui/core/InputBase';\nimport addAcronymForm from 'AddAcronymForm.js';\nvar oldSearchId;\nvar languages = [\"ENGLISH\", \"CHINESE\", \"MALAY\", \"TAMIL\", \"KOREAN\"];\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showHistory = () => {\n      const {\n        changes\n      } = this.state;\n      const data = changes;\n      const columns = [{\n        dataField: 'id',\n        text: 'id',\n        hidden: true\n      }, {\n        dataField: 'timestamp',\n        text: 'Timestamp'\n      }, {\n        dataField: 'changes',\n        text: 'Changes'\n      }];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"changesTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        fluid: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BootstrapTable, {\n        remote: true,\n        keyField: \"id\",\n        data: data,\n        columns: columns,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }\n      })));\n    };\n\n    this.handleTableChange = (type, {\n      page,\n      sizePerPage\n    }) => {\n      const {\n        searchTerm\n      } = this.state;\n      const pageSize = sizePerPage;\n      console.log(\"Type : \" + type);\n      console.log(\"page : \" + page);\n      console.log(\"pageSize : \" + pageSize);\n\n      if (this.state.isSelected) {\n        this.setState({\n          isSelected: false,\n          selected: []\n        });\n      }\n\n      if (type === 'pagination') {\n        const params = this.getRequestParams(searchTerm, page, pageSize);\n        console.log(params);\n        this.retrieveAcronym(params);\n        this.setState({\n          page: page,\n          pageSize: sizePerPage\n        });\n      }\n    };\n\n    this.onSelectRow = (row, isSelect, rowIndex, e) => {\n      if (this.state.isDeleting) {\n        this.setState({\n          isDeleting: false\n        });\n        return false;\n      }\n\n      if (isSelect) {\n        this.retrieveChanges(row.id);\n        this.setState(() => ({\n          selected: [row.id],\n          isSelected: true,\n          selectedRowId: row.id\n        }));\n      } else {\n        this.setState(() => ({\n          selected: [],\n          isSelected: false,\n          selectedRowId: null\n        }));\n      }\n    };\n\n    this.state = {\n      acronyms: [],\n      searchTerm: '',\n      selected: [],\n      isSelected: false,\n      changes: [],\n      page: 1,\n      pageSize: 10,\n      totalRecords: 0,\n      language: \"ENGLISH\"\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      searchTerm,\n      page,\n      pageSize\n    } = this.state;\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async retrieveAcronym(params) {\n    if (params.search) {\n      if (languages.includes(params.search.toUpperCase())) {\n        console.log(\"Found languages\");\n        const response = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '?offset=' + params.offset + '&limit=' + params.pageSize);\n        const data = await response.json();\n        const responseSize = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '/count');\n        const totalRecord = await responseSize.json();\n        this.setState({\n          acronyms: data,\n          totalRecords: totalRecord\n        });\n      } else {\n        const response = await fetch('/api/acronym/all/' + params.search + '?offset=' + params.offset + '&limit=' + params.pageSize);\n        const data = await response.json();\n        const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\n        const totalRecord = await responseSize.json();\n        console.log(totalRecord);\n        this.setState({\n          acronyms: data,\n          totalRecords: totalRecord\n        });\n      }\n    } else {\n      const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\n      const data = await response.json();\n      console.log(data);\n      const responseSize = await fetch('/api/acronym/all/count');\n      const totalRecord = await responseSize.json();\n      this.setState({\n        acronyms: data,\n        totalRecords: totalRecord\n      });\n    }\n  }\n\n  async retrieveChanges(id) {\n    const response = await fetch('api/acronym/changes/' + id);\n    const data = await response.json(); //console.log(data);\n\n    this.setState({\n      changes: data\n    });\n  }\n\n  getRequestParams(searchTerm, page, pageSize) {\n    let params = {};\n    let offset = 0;\n\n    if (searchTerm) {\n      params[\"search\"] = searchTerm;\n    }\n\n    if (page) {\n      params[\"page\"] = page - 1;\n      offset = (page - 1) * pageSize;\n      console.log(offset);\n      params[\"offset\"] = offset;\n    }\n\n    if (pageSize) {\n      params[\"pageSize\"] = pageSize;\n    }\n\n    return params;\n  }\n\n  async remove(id) {\n    const {\n      searchTerm,\n      page,\n      pageSize,\n      acronyms\n    } = this.state;\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    await fetch('api/acronym/changes/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (acronyms.length === 1 && page !== 1) {\n      const params = this.getRequestParams(searchTerm, page - 1, pageSize);\n      await this.retrieveAcronym(params);\n      this.setState({\n        page: page - 1\n      });\n    } else {\n      const params = this.getRequestParams(searchTerm, page, pageSize);\n      await this.retrieveAcronym(params);\n    }\n\n    if (this.state.selectedRowId === id) {\n      this.setState({\n        isSelected: false,\n        selected: []\n      });\n    }\n  }\n  /*async addNewAcronym() {\r\n      const { searchTerm, page, pageSize, language } = this.state;\r\n      console.log(language);\r\n        const newAcronym = {\r\n          acronym: this.acronymInput.value,\r\n          full_term: this.full_termInput.value,\r\n          remark: this.remarkInput.value,\r\n          language: language\r\n      };\r\n        await fetch('api/acronym/new', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(newAcronym),\r\n      });\r\n     \r\n      const params = this.getRequestParams(searchTerm, page, pageSize);\r\n      await this.retrieveAcronym(params);\r\n  } */\n\n\n  async findAcronym(filterVal) {\n    const response = await fetch('/api/acronym/all/' + filterVal + '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\n    const sizeResult = await responseSize.json();\n    this.setState({\n      acronyms: body,\n      totalSize: sizeResult,\n      page: 1\n    });\n  }\n\n  onSearchTerm(e) {\n    var tempSearchTerm = e.target.value;\n\n    if (oldSearchId !== null) {\n      clearTimeout(oldSearchId);\n    }\n\n    const onSearchTerm = setTimeout(() => {\n      console.log(tempSearchTerm);\n      this.setState({\n        searchTerm: tempSearchTerm,\n        page: 1\n      });\n\n      if (this.state.isSelected) {\n        this.setState({\n          isSelected: false,\n          selected: []\n        });\n      }\n\n      const {\n        searchTerm,\n        page,\n        pageSize\n      } = this.state;\n      const formattedParams = this.getRequestParams(searchTerm, page, pageSize);\n      this.retrieveAcronym(formattedParams);\n    }, 1000);\n    oldSearchId = onSearchTerm;\n  }\n\n  render() {\n    const {\n      pageSize,\n      page,\n      totalRecords,\n      acronyms,\n      selected\n    } = this.state;\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym',\n      headerStyle: () => {\n        return {\n          width: \"10%\"\n        };\n      }\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term',\n      headerStyle: () => {\n        return {\n          width: \"40%\"\n        };\n      }\n    }, {\n      dataField: 'remark',\n      text: 'Remarks',\n      headerStyle: () => {\n        return {\n          width: \"35%\"\n        };\n      }\n    }, {\n      dataField: 'language',\n      text: 'Language',\n      editable: false,\n      headerStyle: () => {\n        return {\n          width: \"8%\"\n        };\n      },\n      classes: 'custom_cell'\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete,\n      events: {\n        onClick: (e, column, columnIndex, row, rowIndex) => {\n          this.setState({\n            isDeleting: true\n          });\n          return false;\n        }\n      },\n      headerStyle: () => {\n        return {\n          width: \"5.5%\"\n        };\n      }\n    }];\n    const selectRow = {\n      mode: 'checkbox',\n      hideSelectColumn: true,\n      clickToSelect: true,\n      clickToEdit: true,\n      bgColor: '#8CB0F9',\n      selected: selected,\n      onSelect: this.onSelectRow\n    };\n\n    const DataTable = ({\n      data,\n      page,\n      sizePerPage,\n      onTableChange,\n      totalSize\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, {\n      remote: true,\n      striped: true,\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      pagination: paginationFactory({\n        page,\n        sizePerPage,\n        totalSize\n      }),\n      cellEdit: cellEdit,\n      onTableChange: onTableChange,\n      selectRow: selectRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }\n    })));\n\n    const cellEdit = cellEditFactory({\n      mode: 'dbclick',\n      beforeSaveCell: (oldValue, newValue, row, column) => {\n        console.log(\"Old Value : \" + oldValue);\n        console.log(\"New Value : \" + newValue); //console.log(\"row/elemnt ID : \" + row.id);\n        //console.log(\"column : \" + column.dataField);\n\n        var changes = column.dataField + \" was changed: \" + oldValue + \" => \" + newValue;\n        var date = new Date();\n        var timestamp = \"Date : \" + date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \"  | Time : \" + date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n        var changeRecord = {\n          id: row.id,\n          changes: changes,\n          timestamp: timestamp\n        };\n        var updatedAcronym = {\n          acronym: row.acronym || '',\n          full_term: row.full_term || '',\n          remark: row.remark || '',\n          id: row.id,\n          language: row.language\n        };\n\n        switch (column.dataField) {\n          case 'acronym':\n            updatedAcronym = {\n              acronym: newValue,\n              full_term: row.full_term || '',\n              remark: row.remark || '',\n              id: row.id,\n              language: row.language\n            };\n            break;\n\n          case 'full_term':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: newValue,\n              remark: row.remark || '',\n              id: row.id,\n              language: row.language\n            };\n            break;\n\n          case 'remark':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: row.full_term || '',\n              remark: newValue,\n              id: row.id,\n              language: row.language\n            };\n            break;\n        }\n\n        console.log(updatedAcronym);\n        fetch('api/acronym/all/' + row.id, {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedAcronym)\n        });\n        fetch('api/acronym/changes/new', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(changeRecord)\n        });\n        let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\n        let updatedData = this.state.acronyms;\n        updatedData[updatedAcronymIndex] = updatedAcronym;\n        console.log(updatedData);\n        this.setState({\n          acronyms: updatedData\n        });\n        setTimeout(() => {\n          this.retrieveChanges(row.id);\n        }, 500);\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 17\n      }\n    }, \"Acronym List\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }\n    }, addAcronymForm()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputBase, {\n      type: \"text\",\n      fullWidth: true,\n      placeholder: \"Search by Acronym\",\n      onChange: this.onSearchTerm.bind(this),\n      inputProps: {\n        style: {\n          height: '35px'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DataTable, {\n      data: data,\n      page: page,\n      sizePerPage: pageSize,\n      totalSize: totalRecords,\n      onTableChange: this.handleTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 17\n      }\n    }, this.state.isSelected ? this.showHistory() : null));\n  }\n\n}\n\nexport default AcronymList;\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","DropdownButton","Dropdown","BootstrapTable","cellEditFactory","paginationFactory","InputBase","addAcronymForm","oldSearchId","languages","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showHistory","changes","state","data","columns","dataField","text","hidden","handleTableChange","type","page","sizePerPage","searchTerm","pageSize","console","log","isSelected","setState","selected","params","getRequestParams","retrieveAcronym","onSelectRow","isSelect","e","isDeleting","retrieveChanges","selectedRowId","acronyms","totalRecords","language","componentDidMount","search","includes","toUpperCase","response","fetch","offset","json","responseSize","totalRecord","method","headers","length","findAcronym","filterVal","body","sizeResult","totalSize","onSearchTerm","tempSearchTerm","target","value","clearTimeout","setTimeout","formattedParams","render","headerStyle","width","editable","classes","formatter","events","onClick","column","columnIndex","selectRow","mode","hideSelectColumn","clickToSelect","clickToEdit","bgColor","onSelect","DataTable","onTableChange","cellEdit","beforeSaveCell","oldValue","newValue","date","Date","timestamp","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","changeRecord","updatedAcronym","acronym","full_term","remark","JSON","stringify","updatedAcronymIndex","findIndex","i","updatedData","bind","style","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport addAcronymForm from 'AddAcronymForm.js';\r\n\r\nvar oldSearchId;\r\nvar languages = [\"ENGLISH\", \"CHINESE\",\"MALAY\",\"TAMIL\",\"KOREAN\"];\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            acronyms: [],\r\n            searchTerm: '',\r\n            selected: [],\r\n            isSelected: false,\r\n            changes: [],\r\n\r\n            page: 1,\r\n            pageSize: 10,\r\n            totalRecords: 0,\r\n\r\n            language: \"ENGLISH\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { searchTerm, page, pageSize } = this.state;\r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    }\r\n\r\n    async retrieveAcronym(params) {\r\n\r\n        if (params.search) {\r\n            if (languages.includes(params.search.toUpperCase())) {\r\n                console.log(\"Found languages\");\r\n                const response = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() +\r\n                    '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n                const data = await response.json();\r\n                const responseSize = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '/count');\r\n                const totalRecord = await responseSize.json();\r\n                this.setState({ acronyms: data, totalRecords: totalRecord });\r\n            } else {\r\n                const response = await fetch('/api/acronym/all/' + params.search +\r\n                    '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n                const data = await response.json();\r\n                const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\r\n                const totalRecord = await responseSize.json();\r\n                console.log(totalRecord);\r\n                this.setState({ acronyms: data, totalRecords: totalRecord });\r\n            }\r\n        } else {\r\n            const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\r\n            const data = await response.json();\r\n            console.log(data);\r\n            const responseSize = await fetch('/api/acronym/all/count');\r\n            const totalRecord = await responseSize.json();\r\n\r\n            this.setState({ acronyms: data, totalRecords: totalRecord });\r\n        }\r\n    }\r\n\r\n    async retrieveChanges(id) {\r\n        const response = await fetch('api/acronym/changes/' + id);\r\n        const data = await response.json();\r\n        //console.log(data);\r\n        this.setState({ changes: data });\r\n    }\r\n\r\n    getRequestParams(searchTerm, page, pageSize) {\r\n        let params = {};\r\n        let offset = 0;\r\n\r\n        if (searchTerm) {\r\n            params[\"search\"] = searchTerm;\r\n        }\r\n\r\n        if (page) {\r\n            params[\"page\"] = page - 1;\r\n            offset = (page - 1) * pageSize;\r\n            console.log(offset);\r\n            params[\"offset\"] = offset;\r\n        }\r\n\r\n        if (pageSize) {\r\n            params[\"pageSize\"] = pageSize;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        const { searchTerm, page, pageSize, acronyms } = this.state;\r\n        \r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        await fetch('api/acronym/changes/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n\r\n        if (acronyms.length === 1 && page !== 1) {\r\n            const params = this.getRequestParams(searchTerm, page-1, pageSize);\r\n            await this.retrieveAcronym(params);\r\n            this.setState({ page: page - 1 });\r\n        } else {\r\n            const params = this.getRequestParams(searchTerm, page, pageSize);\r\n            await this.retrieveAcronym(params);\r\n        }\r\n\r\n        if (this.state.selectedRowId === id) {\r\n            this.setState({\r\n                isSelected: false,\r\n                selected: []\r\n            });\r\n        }\r\n    }\r\n\r\n    /*async addNewAcronym() {\r\n        const { searchTerm, page, pageSize, language } = this.state;\r\n        console.log(language);\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value,\r\n            remark: this.remarkInput.value,\r\n            language: language\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n       \r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    } */\r\n\r\n    async findAcronym(filterVal) {\r\n        const response = await fetch('/api/acronym/all/' + filterVal +\r\n            '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\r\n        const sizeResult = await responseSize.json();\r\n        this.setState({ acronyms: body, totalSize: sizeResult, page: 1 });\r\n               \r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n    showHistory = () => {\r\n        const { changes } = this.state;\r\n        const data = changes\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'id',\r\n            hidden: true\r\n        }, {\r\n                dataField: 'timestamp',\r\n                text: 'Timestamp',\r\n\r\n            }, {\r\n                dataField: 'changes',\r\n                text: 'Changes'\r\n\r\n            }];\r\n\r\n        return (\r\n            <div className=\"changesTable\">\r\n                <Container fluid>\r\n                    <BootstrapTable\r\n                        remote\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                    />\r\n\r\n                </Container>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    /* showAddAcronym = () => {\r\n        \r\n        const handleSelect = (e) => {\r\n            console.log(e);\r\n            this.setState({ language: e });\r\n        };\r\n\r\n        let populateDropdown = languages.map(function (item, i) {\r\n            return (\r\n                <Dropdown.Item eventKey={item} key={i}>{item}</Dropdown.Item>\r\n            )\r\n        });\r\n        \r\n        \r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <h3 className=\"formTitle\">Add New Acronym </h3>\r\n                \r\n                <Form noValidate >\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control required placeholder=\"Acronym\" ref={input => this.acronymInput = input} />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Please provide a valid acronym.\r\n                            </Form.Control.Feedback>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control required placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Please provide the full term of the acronym.\r\n                            </Form.Control.Feedback>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        \r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <DropdownButton title={this.state.language} onSelect={handleSelect}>\r\n                                {populateDropdown}\r\n                            </DropdownButton> \r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant=\"success\" className=\"right\" onClick={() => {\r\n                                if ((this.remarkInput.value.length < 200) && (this.acronymInput.value.length < 20)\r\n                                    && (this.full_termInput.value.length < 100)) {\r\n\r\n                                    this.setState({ isAdding: false, language:\"ENGLISH\" });\r\n                                    console.log(this.remarkInput.value.length);\r\n                                    this.addNewAcronym()\r\n                                    this.remarkInput.value = \"\";\r\n                                    this.acronymInput.value = \"\";\r\n                                    this.full_termInput.value = \"\";\r\n\r\n                                } else {\r\n\r\n                                    alert(\"Invalid inputs\");\r\n\r\n                                }\r\n                            }}>Submit</Button>\r\n                        </Col>\r\n                         \r\n                        \r\n                    </Row>\r\n  \r\n                </Form>\r\n               \r\n            </div>\r\n        );\r\n    } */\r\n\r\n    handleTableChange = (type, { page, sizePerPage }) => {\r\n        const { searchTerm } = this.state;\r\n        const pageSize = sizePerPage;\r\n        console.log(\"Type : \" + type);\r\n        console.log(\"page : \" + page);\r\n        console.log(\"pageSize : \" + pageSize);\r\n\r\n        if (this.state.isSelected) {\r\n            this.setState({\r\n                isSelected: false,\r\n                selected: []\r\n            });\r\n        }\r\n\r\n        if (type === 'pagination') {\r\n            const params = this.getRequestParams(searchTerm, page, pageSize);\r\n            console.log(params);\r\n            this.retrieveAcronym(params);\r\n            this.setState({ page: page, pageSize: sizePerPage });\r\n        }\r\n        \r\n    }\r\n\r\n    onSearchTerm(e) {\r\n        var tempSearchTerm = e.target.value;\r\n        if (oldSearchId !== null) {\r\n            clearTimeout(oldSearchId);\r\n        }\r\n\r\n        const onSearchTerm = setTimeout(() => {\r\n            console.log(tempSearchTerm);\r\n            this.setState({ searchTerm: tempSearchTerm, page: 1 });\r\n\r\n            if (this.state.isSelected) {\r\n                this.setState({\r\n                    isSelected: false,\r\n                    selected: []\r\n                });\r\n            }\r\n\r\n            const { searchTerm, page, pageSize } = this.state;\r\n            const formattedParams = this.getRequestParams(searchTerm, page, pageSize);\r\n            this.retrieveAcronym(formattedParams);\r\n        }, 1000);\r\n\r\n        oldSearchId = onSearchTerm;\r\n\r\n    }\r\n\r\n    onSelectRow = (row, isSelect, rowIndex, e) => {\r\n\r\n\r\n        if (this.state.isDeleting) {\r\n            this.setState({ isDeleting: false });\r\n            return false;\r\n        }\r\n\r\n        if (isSelect) {\r\n            this.retrieveChanges(row.id);\r\n            this.setState(() => ({\r\n                selected: [row.id],\r\n                isSelected: true,\r\n                selectedRowId: row.id\r\n            }));\r\n        } else {\r\n            this.setState(() => ({\r\n                selected: [],\r\n                isSelected: false,\r\n                selectedRowId: null\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { pageSize, page, totalRecords, acronyms, selected } = this.state;\r\n\r\n\r\n\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id',\r\n            hidden: true\r\n        }, {\r\n                dataField: 'acronym',\r\n                text: 'Acronym',\r\n                headerStyle: () => {\r\n                    return { width: \"10%\" };\r\n                },\r\n                \r\n        }, {\r\n                dataField: 'full_term',\r\n                text: 'Full Term',\r\n                headerStyle: () => {\r\n                    return { width: \"40%\" };\r\n                }\r\n        }, {\r\n                dataField: 'remark',\r\n                text: 'Remarks',\r\n                headerStyle: () => {\r\n                    return { width: \"35%\" };\r\n                }\r\n        }, {\r\n                dataField: 'language',\r\n                text: 'Language',\r\n                editable: false,\r\n                headerStyle: () => {\r\n                    return { width: \"8%\" };\r\n                },\r\n                classes: 'custom_cell'\r\n        }, {\r\n\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete,\r\n                events: {\r\n                    onClick: (e, column, columnIndex, row, rowIndex) => {\r\n                        this.setState({ isDeleting: true });\r\n                        return false;\r\n                    },\r\n                },\r\n                headerStyle: () => {\r\n                    return { width: \"5.5%\" };\r\n                }\r\n            }];\r\n\r\n        const selectRow = {\r\n            mode: 'checkbox',\r\n            hideSelectColumn: true,\r\n            clickToSelect: true,\r\n            clickToEdit: true,\r\n            bgColor: '#8CB0F9',\r\n            selected: selected,\r\n            onSelect: this.onSelectRow,\r\n        };\r\n\r\n        const DataTable = ({ data, page, sizePerPage, onTableChange, totalSize }) => (\r\n            <div>\r\n                <Container fluid>\r\n\r\n                    <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={cellEdit}\r\n                        onTableChange={onTableChange}\r\n                        selectRow={ selectRow }\r\n                    />\r\n                    \r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n        const cellEdit = cellEditFactory({\r\n            mode: 'dbclick',\r\n            beforeSaveCell: (oldValue, newValue, row, column) => {\r\n                console.log(\"Old Value : \" + oldValue);\r\n                console.log(\"New Value : \" + newValue);\r\n                //console.log(\"row/elemnt ID : \" + row.id);\r\n                //console.log(\"column : \" + column.dataField);\r\n                var changes = column.dataField + \" was changed: \" + oldValue + \" => \" + newValue;\r\n                var date = new Date();\r\n                var timestamp = \"Date : \" + date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \"  | Time : \" +\r\n                    date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n                var changeRecord = {\r\n                    id: row.id,\r\n                    changes: changes,\r\n                    timestamp: timestamp,\r\n                }\r\n\r\n                var updatedAcronym = {\r\n                    acronym: row.acronym || '',\r\n                    full_term: row.full_term || '',\r\n                    remark: row.remark || '',\r\n                    id: row.id,\r\n                    language: row.language\r\n                }\r\n                switch (column.dataField) {\r\n                    case 'acronym':\r\n                        updatedAcronym = {\r\n                            acronym: newValue,\r\n                            full_term: row.full_term || '',\r\n                            remark: row.remark || '',\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                    case 'full_term':\r\n                        updatedAcronym = {    \r\n                            acronym: row.acronym || '',\r\n                            full_term: newValue,\r\n                            remark: row.remark || '',\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                    case 'remark':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym || '',\r\n                            full_term: row.full_term || '',\r\n                            remark: newValue,\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                }\r\n\r\n                console.log(updatedAcronym);\r\n                \r\n                fetch('api/acronym/all/' + row.id, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updatedAcronym),\r\n                });\r\n\r\n                fetch('api/acronym/changes/new', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(changeRecord),\r\n                });\r\n\r\n                let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\r\n                let updatedData = this.state.acronyms;\r\n                updatedData[updatedAcronymIndex] = updatedAcronym;\r\n                console.log(updatedData);\r\n                this.setState({ acronyms: updatedData });\r\n\r\n                setTimeout(() => {\r\n                    this.retrieveChanges(row.id);\r\n                }, 500);\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"title\">Acronym List</h2>\r\n                <div>\r\n                    {addAcronymForm()}\r\n                </div>\r\n\r\n                <div className=\"searchBar\">\r\n                    <InputBase\r\n                        type=\"text\"\r\n                        fullWidth={true}\r\n                        placeholder=\"Search by Acronym\"\r\n                        onChange={this.onSearchTerm.bind(this)}\r\n                        inputProps={{\r\n                            style: {\r\n                                height: '35px',\r\n                            },\r\n                        }}\r\n                    />\r\n                </div>\r\n                \r\n                <DataTable\r\n                    data={data}\r\n                    page={page}\r\n                    sizePerPage={pageSize}\r\n                    totalSize={totalRecords}\r\n                    onTableChange={this.handleTableChange}\r\n                />\r\n\r\n                <div>\r\n                    {this.state.isSelected ? this.showHistory() : null}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;\r\n\r\n\r\n\r\n\r\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/"]},"metadata":{},"sourceType":"module"}