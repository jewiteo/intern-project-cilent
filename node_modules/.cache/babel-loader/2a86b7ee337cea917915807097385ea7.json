{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col, DropdownButton, Dropdown } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport InputBase from '@material-ui/core/InputBase';\nvar oldSearchId;\nvar languages = [\"ENGLISH\", \"CHINESE\", \"MALAY\", \"TAMIL\", \"KOREAN\"];\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showHistory = () => {\n      const {\n        changes\n      } = this.state;\n      const data = changes;\n      const columns = [{\n        dataField: 'id',\n        text: 'id',\n        hidden: true\n      }, {\n        dataField: 'timestamp',\n        text: 'Timestamp'\n      }, {\n        dataField: 'changes',\n        text: 'Changes'\n      }];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"changesTable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        fluid: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BootstrapTable, {\n        remote: true,\n        keyField: \"id\",\n        data: data,\n        columns: columns,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }\n      })));\n    };\n\n    this.showAddAcronym = () => {\n      const handleSelect = e => {\n        console.log(e);\n        this.setState({\n          language: e\n        });\n      };\n\n      let populateDropdown = languages.map(function (item, i) {\n        return /*#__PURE__*/React.createElement(Dropdown.Item, {\n          eventKey: item,\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 17\n          }\n        }, item);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AddAcronymForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        className: \"formTitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }\n      }, \"Add New Acronym \"), /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 29\n        }\n      }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Acronym\",\n        ref: input => this.acronymInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }\n      }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Full Term\",\n        ref: input => this.full_termInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 29\n        }\n      }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        placeholder: \"Remark\",\n        ref: input => this.remarkInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(DropdownButton, {\n        title: this.state.language,\n        onSelect: handleSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }\n      }, populateDropdown)), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        className: \"right\",\n        onClick: () => {\n          if (this.acronymInput.value != \"\" && this.full_termInput.value != \"\") {\n            if (this.remarkInput.value.length < 200 && this.acronymInput.value.length < 20 && this.full_termInput.value.length < 100) {\n              this.setState({\n                isAdding: false,\n                language: \"ENGLISH\"\n              });\n              console.log(this.remarkInput.value.length);\n              this.addNewAcronym();\n              this.remarkInput.value = \"\";\n              this.acronymInput.value = \"\";\n              this.full_termInput.value = \"\";\n            } else {\n              alert(\"Inputs too long for database\");\n            }\n          } else {\n            alert(\"Please enter a acronym and the full term\");\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 29\n        }\n      }, \"Submit\")))));\n    };\n\n    this.handleTableChange = (type, {\n      page,\n      sizePerPage\n    }) => {\n      const {\n        searchTerm\n      } = this.state;\n      const pageSize = sizePerPage;\n      console.log(\"Type : \" + type);\n      console.log(\"page : \" + page);\n      console.log(\"pageSize : \" + pageSize);\n\n      if (this.state.isSelected) {\n        this.setState({\n          isSelected: false,\n          selected: []\n        });\n      }\n\n      if (type === 'pagination') {\n        const params = this.getRequestParams(searchTerm, page, pageSize);\n        console.log(params);\n        this.retrieveAcronym(params);\n        this.setState({\n          page: page,\n          pageSize: sizePerPage\n        });\n      }\n    };\n\n    this.onSelectRow = (row, isSelect, rowIndex, e) => {\n      if (this.state.isDeleting) {\n        this.setState({\n          isDeleting: false\n        });\n        return false;\n      }\n\n      if (isSelect) {\n        this.retrieveChanges(row.id);\n        this.setState(() => ({\n          selected: [row.id],\n          isSelected: true,\n          selectedRowId: row.id\n        }));\n      } else {\n        this.setState(() => ({\n          selected: [],\n          isSelected: false,\n          selectedRowId: null\n        }));\n      }\n    };\n\n    this.state = {\n      acronyms: [],\n      searchTerm: '',\n      selected: [],\n      isSelected: false,\n      changes: [],\n      page: 1,\n      pageSize: 10,\n      totalRecords: 0,\n      language: \"ENGLISH\"\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      searchTerm,\n      page,\n      pageSize\n    } = this.state;\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async retrieveAcronym(params) {\n    if (params.search) {\n      if (languages.includes(params.search.toUpperCase())) {\n        console.log(\"Found languages\");\n        const response = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '?offset=' + params.offset + '&limit=' + params.pageSize);\n        const data = await response.json();\n        const responseSize = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '/count');\n        const totalRecord = await responseSize.json();\n        this.setState({\n          acronyms: data,\n          totalRecords: totalRecord\n        });\n      } else {\n        const response = await fetch('/api/acronym/all/' + params.search + '?offset=' + params.offset + '&limit=' + params.pageSize);\n        const data = await response.json();\n        const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\n        const totalRecord = await responseSize.json();\n        console.log(totalRecord);\n        this.setState({\n          acronyms: data,\n          totalRecords: totalRecord\n        });\n      }\n    } else {\n      const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\n      const data = await response.json();\n      console.log(data);\n      const responseSize = await fetch('/api/acronym/all/count');\n      const totalRecord = await responseSize.json();\n      this.setState({\n        acronyms: data,\n        totalRecords: totalRecord\n      });\n    }\n  }\n\n  async retrieveChanges(id) {\n    const response = await fetch('api/acronym/changes/' + id);\n    const data = await response.json(); //console.log(data);\n\n    this.setState({\n      changes: data\n    });\n  }\n\n  getRequestParams(searchTerm, page, pageSize) {\n    let params = {};\n    let offset = 0;\n\n    if (searchTerm) {\n      params[\"search\"] = searchTerm;\n    }\n\n    if (page) {\n      params[\"page\"] = page - 1;\n      offset = (page - 1) * pageSize;\n      console.log(offset);\n      params[\"offset\"] = offset;\n    }\n\n    if (pageSize) {\n      params[\"pageSize\"] = pageSize;\n    }\n\n    return params;\n  }\n\n  async remove(id) {\n    const {\n      searchTerm,\n      page,\n      pageSize,\n      acronyms\n    } = this.state;\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    await fetch('api/acronym/changes/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (acronyms.length === 1 && page !== 1) {\n      const params = this.getRequestParams(searchTerm, page - 1, pageSize);\n      await this.retrieveAcronym(params);\n      this.setState({\n        page: page - 1\n      });\n    } else {\n      const params = this.getRequestParams(searchTerm, page, pageSize);\n      await this.retrieveAcronym(params);\n    }\n\n    if (this.state.selectedRowId === id) {\n      this.setState({\n        isSelected: false,\n        selected: []\n      });\n    }\n  }\n\n  async addNewAcronym() {\n    const {\n      searchTerm,\n      page,\n      pageSize,\n      language\n    } = this.state;\n    console.log(language);\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value,\n      remark: this.remarkInput.value,\n      language: language\n    };\n    await fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    });\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async findAcronym(filterVal) {\n    const response = await fetch('/api/acronym/all/' + filterVal + '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\n    const sizeResult = await responseSize.json();\n    this.setState({\n      acronyms: body,\n      totalSize: sizeResult,\n      page: 1\n    });\n  }\n\n  onSearchTerm(e) {\n    var tempSearchTerm = e.target.value;\n\n    if (oldSearchId !== null) {\n      clearTimeout(oldSearchId);\n    }\n\n    const onSearchTerm = setTimeout(() => {\n      console.log(tempSearchTerm);\n      this.setState({\n        searchTerm: tempSearchTerm,\n        page: 1\n      });\n\n      if (this.state.isSelected) {\n        this.setState({\n          isSelected: false,\n          selected: []\n        });\n      }\n\n      const {\n        searchTerm,\n        page,\n        pageSize\n      } = this.state;\n      const formattedParams = this.getRequestParams(searchTerm, page, pageSize);\n      this.retrieveAcronym(formattedParams);\n    }, 1000);\n    oldSearchId = onSearchTerm;\n  }\n\n  render() {\n    const {\n      pageSize,\n      page,\n      totalRecords,\n      acronyms,\n      selected\n    } = this.state;\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym',\n      headerStyle: () => {\n        return {\n          width: \"10%\"\n        };\n      }\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term',\n      headerStyle: () => {\n        return {\n          width: \"40%\"\n        };\n      }\n    }, {\n      dataField: 'remark',\n      text: 'Remarks',\n      headerStyle: () => {\n        return {\n          width: \"35%\"\n        };\n      }\n    }, {\n      dataField: 'language',\n      text: 'Language',\n      editable: false,\n      headerStyle: () => {\n        return {\n          width: \"8%\"\n        };\n      },\n      classes: 'custom_cell'\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete,\n      events: {\n        onClick: (e, column, columnIndex, row, rowIndex) => {\n          this.setState({\n            isDeleting: true\n          });\n          return false;\n        }\n      },\n      headerStyle: () => {\n        return {\n          width: \"5.5%\"\n        };\n      }\n    }];\n    const selectRow = {\n      mode: 'checkbox',\n      hideSelectColumn: true,\n      clickToSelect: true,\n      clickToEdit: true,\n      bgColor: '#8CB0F9',\n      selected: selected,\n      onSelect: this.onSelectRow\n    };\n\n    const DataTable = ({\n      data,\n      page,\n      sizePerPage,\n      onTableChange,\n      totalSize\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, {\n      remote: true,\n      striped: true,\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      pagination: paginationFactory({\n        page,\n        sizePerPage,\n        totalSize\n      }),\n      cellEdit: cellEdit,\n      onTableChange: onTableChange,\n      selectRow: selectRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 21\n      }\n    })));\n\n    const cellEdit = cellEditFactory({\n      mode: 'dbclick',\n      beforeSaveCell: (oldValue, newValue, row, column) => {\n        console.log(\"Old Value : \" + oldValue);\n        console.log(\"New Value : \" + newValue); //console.log(\"row/elemnt ID : \" + row.id);\n        //console.log(\"column : \" + column.dataField);\n\n        var changes = column.dataField + \" was changed: \" + oldValue + \" => \" + newValue;\n        var date = new Date();\n        var timestamp = \"Date : \" + date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \"  | Time : \" + date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n        var changeRecord = {\n          id: row.id,\n          changes: changes,\n          timestamp: timestamp\n        };\n        var updatedAcronym = {\n          acronym: row.acronym || '',\n          full_term: row.full_term || '',\n          remark: row.remark || '',\n          id: row.id,\n          language: row.language\n        };\n\n        switch (column.dataField) {\n          case 'acronym':\n            updatedAcronym = {\n              acronym: newValue,\n              full_term: row.full_term || '',\n              remark: row.remark || '',\n              id: row.id,\n              language: row.language\n            };\n            break;\n\n          case 'full_term':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: newValue,\n              remark: row.remark || '',\n              id: row.id,\n              language: row.language\n            };\n            break;\n\n          case 'remark':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: row.full_term || '',\n              remark: newValue,\n              id: row.id,\n              language: row.language\n            };\n            break;\n        }\n\n        console.log(updatedAcronym);\n        fetch('api/acronym/all/' + row.id, {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedAcronym)\n        });\n        fetch('api/acronym/changes/new', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(changeRecord)\n        });\n        let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\n        let updatedData = this.state.acronyms;\n        updatedData[updatedAcronymIndex] = updatedAcronym;\n        console.log(updatedData);\n        this.setState({\n          acronyms: updatedData\n        });\n        setTimeout(() => {\n          this.retrieveChanges(row.id);\n        }, 500);\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }\n    }, \"Acronym List\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 17\n      }\n    }, this.showAddAcronym()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputBase, {\n      type: \"text\",\n      fullWidth: true,\n      placeholder: \"Search by Acronym\",\n      onChange: this.onSearchTerm.bind(this),\n      inputProps: {\n        style: {\n          height: '35px'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DataTable, {\n      data: data,\n      page: page,\n      sizePerPage: pageSize,\n      totalSize: totalRecords,\n      onTableChange: this.handleTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 17\n      }\n    }, this.state.isSelected ? this.showHistory() : null));\n  }\n\n}\n\nexport default AcronymList;\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","DropdownButton","Dropdown","BootstrapTable","cellEditFactory","paginationFactory","InputBase","oldSearchId","languages","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showHistory","changes","state","data","columns","dataField","text","hidden","showAddAcronym","handleSelect","e","console","log","setState","language","populateDropdown","map","item","i","input","acronymInput","full_termInput","remarkInput","value","length","isAdding","addNewAcronym","alert","handleTableChange","type","page","sizePerPage","searchTerm","pageSize","isSelected","selected","params","getRequestParams","retrieveAcronym","onSelectRow","isSelect","isDeleting","retrieveChanges","selectedRowId","acronyms","totalRecords","componentDidMount","search","includes","toUpperCase","response","fetch","offset","json","responseSize","totalRecord","method","headers","newAcronym","acronym","full_term","remark","body","JSON","stringify","findAcronym","filterVal","sizeResult","totalSize","onSearchTerm","tempSearchTerm","target","clearTimeout","setTimeout","formattedParams","render","headerStyle","width","editable","classes","formatter","events","onClick","column","columnIndex","selectRow","mode","hideSelectColumn","clickToSelect","clickToEdit","bgColor","onSelect","DataTable","onTableChange","cellEdit","beforeSaveCell","oldValue","newValue","date","Date","timestamp","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","changeRecord","updatedAcronym","updatedAcronymIndex","findIndex","updatedData","bind","style","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nvar oldSearchId;\r\nvar languages = [\"ENGLISH\", \"CHINESE\",\"MALAY\",\"TAMIL\",\"KOREAN\"];\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            acronyms: [],\r\n            searchTerm: '',\r\n            selected: [],\r\n            isSelected: false,\r\n            changes: [],\r\n\r\n            page: 1,\r\n            pageSize: 10,\r\n            totalRecords: 0,\r\n\r\n            language: \"ENGLISH\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { searchTerm, page, pageSize } = this.state;\r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    }\r\n\r\n    async retrieveAcronym(params) {\r\n\r\n        if (params.search) {\r\n            if (languages.includes(params.search.toUpperCase())) {\r\n                console.log(\"Found languages\");\r\n                const response = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() +\r\n                    '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n                const data = await response.json();\r\n                const responseSize = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '/count');\r\n                const totalRecord = await responseSize.json();\r\n                this.setState({ acronyms: data, totalRecords: totalRecord });\r\n            } else {\r\n                const response = await fetch('/api/acronym/all/' + params.search +\r\n                    '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n                const data = await response.json();\r\n                const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\r\n                const totalRecord = await responseSize.json();\r\n                console.log(totalRecord);\r\n                this.setState({ acronyms: data, totalRecords: totalRecord });\r\n            }\r\n        } else {\r\n            const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\r\n            const data = await response.json();\r\n            console.log(data);\r\n            const responseSize = await fetch('/api/acronym/all/count');\r\n            const totalRecord = await responseSize.json();\r\n\r\n            this.setState({ acronyms: data, totalRecords: totalRecord });\r\n        }\r\n    }\r\n\r\n    async retrieveChanges(id) {\r\n        const response = await fetch('api/acronym/changes/' + id);\r\n        const data = await response.json();\r\n        //console.log(data);\r\n        this.setState({ changes: data });\r\n    }\r\n\r\n    getRequestParams(searchTerm, page, pageSize) {\r\n        let params = {};\r\n        let offset = 0;\r\n\r\n        if (searchTerm) {\r\n            params[\"search\"] = searchTerm;\r\n        }\r\n\r\n        if (page) {\r\n            params[\"page\"] = page - 1;\r\n            offset = (page - 1) * pageSize;\r\n            console.log(offset);\r\n            params[\"offset\"] = offset;\r\n        }\r\n\r\n        if (pageSize) {\r\n            params[\"pageSize\"] = pageSize;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        const { searchTerm, page, pageSize, acronyms } = this.state;\r\n        \r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        await fetch('api/acronym/changes/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n\r\n        if (acronyms.length === 1 && page !== 1) {\r\n            const params = this.getRequestParams(searchTerm, page-1, pageSize);\r\n            await this.retrieveAcronym(params);\r\n            this.setState({ page: page - 1 });\r\n        } else {\r\n            const params = this.getRequestParams(searchTerm, page, pageSize);\r\n            await this.retrieveAcronym(params);\r\n        }\r\n\r\n        if (this.state.selectedRowId === id) {\r\n            this.setState({\r\n                isSelected: false,\r\n                selected: []\r\n            });\r\n        }\r\n    }\r\n\r\n    async addNewAcronym() {\r\n        const { searchTerm, page, pageSize, language } = this.state;\r\n        console.log(language);\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value,\r\n            remark: this.remarkInput.value,\r\n            language: language\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n       \r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    } \r\n\r\n    async findAcronym(filterVal) {\r\n        const response = await fetch('/api/acronym/all/' + filterVal +\r\n            '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\r\n        const sizeResult = await responseSize.json();\r\n        this.setState({ acronyms: body, totalSize: sizeResult, page: 1 });\r\n               \r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n    showHistory = () => {\r\n        const { changes } = this.state;\r\n        const data = changes\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'id',\r\n            hidden: true\r\n        }, {\r\n                dataField: 'timestamp',\r\n                text: 'Timestamp',\r\n\r\n            }, {\r\n                dataField: 'changes',\r\n                text: 'Changes'\r\n\r\n            }];\r\n\r\n        return (\r\n            <div className=\"changesTable\">\r\n                <Container fluid>\r\n                    <BootstrapTable\r\n                        remote\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                    />\r\n\r\n                </Container>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    showAddAcronym = () => {\r\n        \r\n        const handleSelect = (e) => {\r\n            console.log(e);\r\n            this.setState({ language: e });\r\n        };\r\n\r\n        let populateDropdown = languages.map(function (item, i) {\r\n            return (\r\n                <Dropdown.Item eventKey={item} key={i}>{item}</Dropdown.Item>\r\n            )\r\n        });\r\n        \r\n        \r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <h3 className=\"formTitle\">Add New Acronym </h3>\r\n                \r\n                <Form>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control placeholder=\"Acronym\" ref={input => this.acronymInput = input} />\r\n                            \r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                            \r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        \r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <DropdownButton title={this.state.language} onSelect={handleSelect}>\r\n                                {populateDropdown}\r\n                            </DropdownButton> \r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant=\"success\" className=\"right\" onClick={() => {\r\n\r\n                                if (this.acronymInput.value != \"\" && this.full_termInput.value != \"\") {\r\n                                    if ((this.remarkInput.value.length < 200) && (this.acronymInput.value.length < 20)\r\n                                        && (this.full_termInput.value.length < 100)) {\r\n\r\n                                        this.setState({ isAdding: false, language: \"ENGLISH\" });\r\n                                        console.log(this.remarkInput.value.length);\r\n                                        this.addNewAcronym()\r\n                                        this.remarkInput.value = \"\";\r\n                                        this.acronymInput.value = \"\";\r\n                                        this.full_termInput.value = \"\";\r\n\r\n                                    } else {\r\n\r\n                                        alert(\"Inputs too long for database\");\r\n\r\n                                    }\r\n\r\n                                } else {\r\n\r\n                                    alert(\"Please enter a acronym and the full term\");\r\n                                }\r\n\r\n\r\n                            }}>Submit</Button>\r\n                        </Col>\r\n                         \r\n                        \r\n                    </Row>\r\n  \r\n                </Form>\r\n               \r\n            </div>\r\n        );\r\n    } \r\n\r\n    handleTableChange = (type, { page, sizePerPage }) => {\r\n        const { searchTerm } = this.state;\r\n        const pageSize = sizePerPage;\r\n        console.log(\"Type : \" + type);\r\n        console.log(\"page : \" + page);\r\n        console.log(\"pageSize : \" + pageSize);\r\n\r\n        if (this.state.isSelected) {\r\n            this.setState({\r\n                isSelected: false,\r\n                selected: []\r\n            });\r\n        }\r\n\r\n        if (type === 'pagination') {\r\n            const params = this.getRequestParams(searchTerm, page, pageSize);\r\n            console.log(params);\r\n            this.retrieveAcronym(params);\r\n            this.setState({ page: page, pageSize: sizePerPage });\r\n        }\r\n        \r\n    }\r\n\r\n    onSearchTerm(e) {\r\n        var tempSearchTerm = e.target.value;\r\n        if (oldSearchId !== null) {\r\n            clearTimeout(oldSearchId);\r\n        }\r\n\r\n        const onSearchTerm = setTimeout(() => {\r\n            console.log(tempSearchTerm);\r\n            this.setState({ searchTerm: tempSearchTerm, page: 1 });\r\n\r\n            if (this.state.isSelected) {\r\n                this.setState({\r\n                    isSelected: false,\r\n                    selected: []\r\n                });\r\n            }\r\n\r\n            const { searchTerm, page, pageSize } = this.state;\r\n            const formattedParams = this.getRequestParams(searchTerm, page, pageSize);\r\n            this.retrieveAcronym(formattedParams);\r\n        }, 1000);\r\n\r\n        oldSearchId = onSearchTerm;\r\n\r\n    }\r\n\r\n    onSelectRow = (row, isSelect, rowIndex, e) => {\r\n\r\n\r\n        if (this.state.isDeleting) {\r\n            this.setState({ isDeleting: false });\r\n            return false;\r\n        }\r\n\r\n        if (isSelect) {\r\n            this.retrieveChanges(row.id);\r\n            this.setState(() => ({\r\n                selected: [row.id],\r\n                isSelected: true,\r\n                selectedRowId: row.id\r\n            }));\r\n        } else {\r\n            this.setState(() => ({\r\n                selected: [],\r\n                isSelected: false,\r\n                selectedRowId: null\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { pageSize, page, totalRecords, acronyms, selected } = this.state;\r\n\r\n\r\n\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id',\r\n            hidden: true\r\n        }, {\r\n                dataField: 'acronym',\r\n                text: 'Acronym',\r\n                headerStyle: () => {\r\n                    return { width: \"10%\" };\r\n                },\r\n                \r\n        }, {\r\n                dataField: 'full_term',\r\n                text: 'Full Term',\r\n                headerStyle: () => {\r\n                    return { width: \"40%\" };\r\n                }\r\n        }, {\r\n                dataField: 'remark',\r\n                text: 'Remarks',\r\n                headerStyle: () => {\r\n                    return { width: \"35%\" };\r\n                }\r\n        }, {\r\n                dataField: 'language',\r\n                text: 'Language',\r\n                editable: false,\r\n                headerStyle: () => {\r\n                    return { width: \"8%\" };\r\n                },\r\n                classes: 'custom_cell'\r\n        }, {\r\n\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete,\r\n                events: {\r\n                    onClick: (e, column, columnIndex, row, rowIndex) => {\r\n                        this.setState({ isDeleting: true });\r\n                        return false;\r\n                    },\r\n                },\r\n                headerStyle: () => {\r\n                    return { width: \"5.5%\" };\r\n                }\r\n            }];\r\n\r\n        const selectRow = {\r\n            mode: 'checkbox',\r\n            hideSelectColumn: true,\r\n            clickToSelect: true,\r\n            clickToEdit: true,\r\n            bgColor: '#8CB0F9',\r\n            selected: selected,\r\n            onSelect: this.onSelectRow,\r\n        };\r\n\r\n        const DataTable = ({ data, page, sizePerPage, onTableChange, totalSize }) => (\r\n            <div>\r\n                <Container fluid>\r\n\r\n                    <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={cellEdit}\r\n                        onTableChange={onTableChange}\r\n                        selectRow={ selectRow }\r\n                    />\r\n                    \r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n        const cellEdit = cellEditFactory({\r\n            mode: 'dbclick',\r\n            beforeSaveCell: (oldValue, newValue, row, column) => {\r\n                console.log(\"Old Value : \" + oldValue);\r\n                console.log(\"New Value : \" + newValue);\r\n                //console.log(\"row/elemnt ID : \" + row.id);\r\n                //console.log(\"column : \" + column.dataField);\r\n                var changes = column.dataField + \" was changed: \" + oldValue + \" => \" + newValue;\r\n                var date = new Date();\r\n                var timestamp = \"Date : \" + date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear() + \"  | Time : \" +\r\n                    date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n                var changeRecord = {\r\n                    id: row.id,\r\n                    changes: changes,\r\n                    timestamp: timestamp,\r\n                }\r\n\r\n                var updatedAcronym = {\r\n                    acronym: row.acronym || '',\r\n                    full_term: row.full_term || '',\r\n                    remark: row.remark || '',\r\n                    id: row.id,\r\n                    language: row.language\r\n                }\r\n                switch (column.dataField) {\r\n                    case 'acronym':\r\n                        updatedAcronym = {\r\n                            acronym: newValue,\r\n                            full_term: row.full_term || '',\r\n                            remark: row.remark || '',\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                    case 'full_term':\r\n                        updatedAcronym = {    \r\n                            acronym: row.acronym || '',\r\n                            full_term: newValue,\r\n                            remark: row.remark || '',\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                    case 'remark':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym || '',\r\n                            full_term: row.full_term || '',\r\n                            remark: newValue,\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                }\r\n\r\n                console.log(updatedAcronym);\r\n                \r\n                fetch('api/acronym/all/' + row.id, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updatedAcronym),\r\n                });\r\n\r\n                fetch('api/acronym/changes/new', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(changeRecord),\r\n                });\r\n\r\n                let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\r\n                let updatedData = this.state.acronyms;\r\n                updatedData[updatedAcronymIndex] = updatedAcronym;\r\n                console.log(updatedData);\r\n                this.setState({ acronyms: updatedData });\r\n\r\n                setTimeout(() => {\r\n                    this.retrieveChanges(row.id);\r\n                }, 500);\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <h2 className=\"title\">Acronym List</h2>\r\n                <div>\r\n                    {this.showAddAcronym()}\r\n                </div>\r\n\r\n                <div className=\"searchBar\">\r\n                    <InputBase\r\n                        type=\"text\"\r\n                        fullWidth={true}\r\n                        placeholder=\"Search by Acronym\"\r\n                        onChange={this.onSearchTerm.bind(this)}\r\n                        inputProps={{\r\n                            style: {\r\n                                height: '35px',\r\n                            },\r\n                        }}\r\n                    />\r\n                </div>\r\n                \r\n                <DataTable\r\n                    data={data}\r\n                    page={page}\r\n                    sizePerPage={pageSize}\r\n                    totalSize={totalRecords}\r\n                    onTableChange={this.handleTableChange}\r\n                />\r\n\r\n                <div>\r\n                    {this.state.isSelected ? this.showHistory() : null}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;\r\n\r\n\r\n\r\n\r\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/"]},"metadata":{},"sourceType":"module"}