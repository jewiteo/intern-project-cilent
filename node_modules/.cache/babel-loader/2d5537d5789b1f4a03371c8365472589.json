{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AddAcronymForm.js\";\nvar languages = [\"ENGLISH\", \"CHINESE\", \"MALAY\", \"TAMIL\", \"KOREAN\"];\n\nfunction addAcronymForm() {\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value,\n      remark: this.remarkInput.value,\n      language: language\n    };\n    fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    });\n    setValidated(true);\n  };\n\n  const handleSelect = e => {\n    console.log(e);\n    this.setState({\n      language: e\n    });\n  };\n\n  let populateDropdown = languages.map(function (item, i) {\n    return /*#__PURE__*/React.createElement(Dropdown.Item, {\n      eventKey: item,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, item);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"AddAcronymForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"formTitle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Add New Acronym \"), /*#__PURE__*/React.createElement(Form, {\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"RowMargin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    placeholder: \"Acronym\",\n    ref: input => this.acronymInput = input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, \"Please provide a valid acronym.\")), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 25\n    }\n  }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n    required: true,\n    placeholder: \"Full Term\",\n    ref: input => this.full_termInput = input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, \"Please provide the full term of the acronym.\"))), /*#__PURE__*/React.createElement(Row, {\n    className: \"RowMargin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 25\n    }\n  }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"textarea\",\n    placeholder: \"Remark\",\n    ref: input => this.remarkInput = input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    className: \"RowMargin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DropdownButton, {\n    title: this.state.language,\n    onSelect: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, populateDropdown)), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    className: \"right\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  }, \"Submit\")))));\n}","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AddAcronymForm.js"],"names":["languages","addAcronymForm","validated","setValidated","useState","handleSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","newAcronym","acronym","acronymInput","value","full_term","full_termInput","remark","remarkInput","language","fetch","method","headers","body","JSON","stringify","handleSelect","e","console","log","setState","populateDropdown","map","item","i","input","state"],"mappings":"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","sourcesContent":["var languages = [\"ENGLISH\", \"CHINESE\", \"MALAY\", \"TAMIL\", \"KOREAN\"];\r\n\r\nfunction addAcronymForm() {\r\n\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value,\r\n            remark: this.remarkInput.value,\r\n            language: language\r\n        };\r\n\r\n        fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n\r\n        setValidated(true);\r\n    };\r\n        \r\n    const handleSelect = (e) => {\r\n        console.log(e);\r\n        this.setState({ language: e });\r\n    };\r\n\r\n    let populateDropdown = languages.map(function (item, i) {\r\n        return (\r\n            <Dropdown.Item eventKey={item} key={i}>{item}</Dropdown.Item>\r\n        )\r\n    });\r\n        \r\n        \r\n    return (\r\n        <div className=\"AddAcronymForm\">\r\n            <h3 className=\"formTitle\">Add New Acronym </h3>\r\n                \r\n            <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n                <Row className=\"RowMargin\">\r\n                    <Col>\r\n                        <Form.Label>Acronym</Form.Label>\r\n                        <Form.Control required placeholder=\"Acronym\" ref={input => this.acronymInput = input} />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please provide a valid acronym.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Label>Full Term</Form.Label>\r\n                        <Form.Control required placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Please provide the full term of the acronym.\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"RowMargin\">\r\n                        \r\n                    <Col>\r\n                        <Form.Label>Remarks/Comments</Form.Label>\r\n                        <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"RowMargin\">\r\n                    <Col>\r\n                        <DropdownButton title={this.state.language} onSelect={handleSelect}>\r\n                            {populateDropdown}\r\n                        </DropdownButton> \r\n                    </Col>\r\n                    <Col>\r\n                        <Button variant=\"success\" className=\"right\" type=\"submit\">Submit</Button>\r\n                    </Col>\r\n                         \r\n                        \r\n                </Row>\r\n  \r\n            </Form>\r\n               \r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}