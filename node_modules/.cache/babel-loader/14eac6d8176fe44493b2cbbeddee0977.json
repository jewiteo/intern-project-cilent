{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nvar searchTerm;\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showAddAcronym = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AddAcronymForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 29\n        }\n      }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Acronym\",\n        ref: input => this.acronymInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 29\n        }\n      }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Full Term\",\n        ref: input => this.full_termInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 29\n        }\n      }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        placeholder: \"Remark\",\n        ref: input => this.remarkInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n          console.log(this.remarkInput.value);\n          this.addNewAcronym();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    };\n\n    this.handleTableChange = (type, {\n      page,\n      sizePerPage\n    }) => {\n      const {\n        searchTerm\n      } = this.state;\n      const pageSize = sizePerPage;\n      console.log(\"Type : \" + type);\n      console.log(\"page : \" + page);\n      console.log(\"pageSize : \" + pageSize);\n\n      if (type === 'pagination') {\n        const params = this.getRequestParams(searchTerm, page, pageSize);\n        console.log(params);\n        this.retrieveAcronym(params);\n        this.setState({\n          page: page,\n          pageSize: sizePerPage\n        });\n      }\n    };\n\n    this.state = {\n      acronyms: [],\n      searchTerm: '',\n      page: 1,\n      pageSize: 10,\n      totalRecords: 0\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      searchTerm,\n      page,\n      pageSize\n    } = this.state;\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async retrieveAcronym(params) {\n    if (params.search) {\n      const response = await fetch('/api/acronym/all/' + params.search + '?offset=' + params.offset + '&limit=' + params.pageSize);\n      const data = await response.json();\n      const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\n      const totalRecord = await responseSize.json();\n      this.setState({\n        acronyms: data,\n        totalRecords: totalRecord\n      });\n    } else {\n      const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\n      const data = await response.json();\n      console.log(data);\n      const responseSize = await fetch('/api/acronym/all/count');\n      const totalRecord = await responseSize.json();\n      this.setState({\n        acronyms: data,\n        totalRecords: totalRecord\n      });\n    }\n  }\n\n  getRequestParams(searchTerm, page, pageSize) {\n    let params = {};\n    let offset = 0;\n\n    if (searchTerm) {\n      params[\"search\"] = searchTerm;\n    }\n\n    if (page) {\n      params[\"page\"] = page - 1;\n      offset = (page - 1) * pageSize;\n      console.log(offset);\n      params[\"offset\"] = offset;\n    }\n\n    if (pageSize) {\n      params[\"pageSize\"] = pageSize;\n    }\n\n    return params;\n  }\n\n  async remove(id) {\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\n      this.setState({\n        acronyms: updatedAcronyms\n      });\n    });\n  }\n\n  async addNewAcronym() {\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value,\n      remark: this.remarkInput.value\n    };\n    await fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    }); //need to update this\n\n    const response = await fetch('/api/acronym/all');\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body\n    });\n  }\n\n  async findAcronym(filterVal) {\n    const response = await fetch('/api/acronym/all/' + filterVal + '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\n    const sizeResult = await responseSize.json();\n    this.setState({\n      acronyms: body,\n      totalSize: sizeResult,\n      page: 1\n    });\n  }\n\n  render() {\n    const {\n      pageSize,\n      page,\n      totalRecords,\n      acronyms\n    } = this.state;\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym'\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term'\n    }, {\n      dataField: 'remark',\n      text: 'Remarks'\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete\n    }];\n\n    const DataTable = ({\n      data,\n      page,\n      pageSize,\n      onTableChange,\n      totalSize\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 21\n      }\n    }, \"Acronym List\"), this.showAddAcronym(), /*#__PURE__*/React.createElement(BootstrapTable, {\n      remote: true,\n      striped: true,\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      pagination: paginationFactory({\n        page,\n        pageSize,\n        totalSize\n      }),\n      cellEdit: cellEdit,\n      onTableChange: onTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    })));\n\n    const cellEdit = cellEditFactory({\n      mode: 'dbclick',\n      beforeSaveCell: (oldValue, newValue, row, column) => {\n        console.log(\"Old Value : \" + oldValue);\n        console.log(\"New Value : \" + newValue); //console.log(\"row/elemnt ID : \" + row.id);\n        //console.log(\"column : \" + column.dataField);\n\n        var updatedAcronym = {\n          acronym: row.acronym || '',\n          full_term: row.full_term || '',\n          remark: row.remark || '',\n          id: row.id\n        };\n\n        switch (column.dataField) {\n          case 'acronym':\n            updatedAcronym = {\n              acronym: newValue,\n              full_term: row.full_term || '',\n              remark: row.remark || '',\n              id: row.id\n            };\n            break;\n\n          case 'full_term':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: newValue,\n              remark: row.remark || '',\n              id: row.id\n            };\n            break;\n\n          case 'remark':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: row.full_term || '',\n              remark: newValue,\n              id: row.id\n            };\n            break;\n        }\n\n        console.log(updatedAcronym);\n        fetch('api/acronym/all/' + row.id, {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedAcronym)\n        });\n        let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\n        let updatedData = this.state.acronyms;\n        updatedData[updatedAcronymIndex] = updatedAcronym;\n        console.log(updatedData);\n        this.setState({\n          acronyms: updatedData\n        });\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      data: data,\n      page: page,\n      sizePerPage: pageSize,\n      totalSize: totalRecords,\n      onTableChange: this.handleTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default AcronymList;\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","BootstrapTable","filterFactory","textFilter","cellEditFactory","paginationFactory","searchTerm","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showAddAcronym","input","acronymInput","full_termInput","remarkInput","setState","isAdding","console","log","value","addNewAcronym","handleTableChange","type","page","sizePerPage","state","pageSize","params","getRequestParams","retrieveAcronym","acronyms","totalRecords","componentDidMount","search","response","fetch","offset","data","json","responseSize","totalRecord","method","headers","then","updatedAcronyms","filter","i","newAcronym","acronym","full_term","remark","body","JSON","stringify","findAcronym","filterVal","sizeResult","totalSize","render","columns","dataField","text","hidden","formatter","DataTable","onTableChange","cellEdit","mode","beforeSaveCell","oldValue","newValue","column","updatedAcronym","updatedAcronymIndex","findIndex","updatedData"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\n\r\nvar searchTerm;\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            acronyms: [],\r\n            searchTerm: '',\r\n\r\n            page: 1,\r\n            pageSize: 10,\r\n            totalRecords: 0,\r\n            \r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { searchTerm, page, pageSize } = this.state;\r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    }\r\n\r\n    async retrieveAcronym(params) {\r\n\r\n        if (params.search) {\r\n            const response = await fetch('/api/acronym/all/' + params.search +\r\n                '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n            const data = await response.json();\r\n\r\n            const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\r\n            const totalRecord = await responseSize.json();\r\n            this.setState({ acronyms: data, totalRecords: totalRecord });\r\n        } else {\r\n            const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\r\n            const data = await response.json();\r\n            console.log(data);\r\n            const responseSize = await fetch('/api/acronym/all/count');\r\n            const totalRecord = await responseSize.json();\r\n\r\n            this.setState({ acronyms: data, totalRecords: totalRecord });\r\n        }\r\n    }\r\n\r\n    getRequestParams(searchTerm, page, pageSize) {\r\n        let params = {};\r\n        let offset = 0;\r\n\r\n        if (searchTerm) {\r\n            params[\"search\"] = searchTerm;\r\n        }\r\n\r\n        if (page) {\r\n            params[\"page\"] = page - 1;\r\n            offset = (page - 1) * pageSize;\r\n            console.log(offset);\r\n            params[\"offset\"] = offset;\r\n        }\r\n\r\n        if (pageSize) {\r\n            params[\"pageSize\"] = pageSize;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\r\n            this.setState({ acronyms: updatedAcronyms });\r\n        });\r\n\r\n    }\r\n\r\n    async addNewAcronym() {\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value,\r\n            remark: this.remarkInput.value,\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n\r\n        //need to update this\r\n        const response = await fetch('/api/acronym/all')\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body});\r\n    }\r\n\r\n    async findAcronym(filterVal) {\r\n        const response = await fetch('/api/acronym/all/' + filterVal +\r\n            '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\r\n        const sizeResult = await responseSize.json();\r\n        this.setState({ acronyms: body, totalSize: sizeResult, page: 1 });\r\n               \r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n    showAddAcronym = () => {\r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <Form>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control placeholder=\"Acronym\" ref={input => this.acronymInput = input}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                        <Button variant=\"success\" className=\"float-right\" onClick={() => {\r\n                        this.setState({ isAdding: false });\r\n                        console.log(this.remarkInput.value);\r\n                        this.addNewAcronym()\r\n                        }}>Submit</Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleTableChange = (type, { page, sizePerPage }) => {\r\n        const { searchTerm } = this.state;\r\n        const pageSize = sizePerPage;\r\n        console.log(\"Type : \" + type);\r\n        console.log(\"page : \" + page);\r\n        console.log(\"pageSize : \" + pageSize);\r\n\r\n\r\n        if (type === 'pagination') {\r\n            const params = this.getRequestParams(searchTerm, page, pageSize);\r\n            console.log(params);\r\n            this.retrieveAcronym(params);\r\n            this.setState({ page: page, pageSize: sizePerPage });\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        const { pageSize, page, totalRecords, acronyms } = this.state;\r\n\r\n\r\n\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id',\r\n            hidden: true\r\n        }, {\r\n                dataField: 'acronym',\r\n                text: 'Acronym',\r\n        }, {\r\n            dataField: 'full_term',\r\n            text: 'Full Term',\r\n        }, {\r\n            dataField: 'remark',\r\n            text: 'Remarks'\r\n        }, {\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete\r\n            }];\r\n\r\n        const DataTable = ({ data, page, pageSize, onTableChange, totalSize }) => (\r\n            <div>\r\n                <Container fluid>\r\n                    \r\n                    <h2>Acronym List</h2>\r\n\r\n                    {this.showAddAcronym()}\r\n\r\n                    <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, pageSize, totalSize })}\r\n                        cellEdit={cellEdit}\r\n                        onTableChange={onTableChange}                   \r\n                    />\r\n                    \r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n        const cellEdit = cellEditFactory({\r\n            mode: 'dbclick',\r\n            beforeSaveCell: (oldValue, newValue, row, column) => {\r\n                console.log(\"Old Value : \" + oldValue);\r\n                console.log(\"New Value : \" + newValue);\r\n                //console.log(\"row/elemnt ID : \" + row.id);\r\n                //console.log(\"column : \" + column.dataField);\r\n                var updatedAcronym = {\r\n                    acronym: row.acronym || '',\r\n                    full_term: row.full_term || '',\r\n                    remark: row.remark || '',\r\n                    id: row.id\r\n                }\r\n                switch (column.dataField) {\r\n                    case 'acronym':\r\n                        updatedAcronym = {\r\n                            acronym: newValue,\r\n                            full_term: row.full_term || '',\r\n                            remark: row.remark || '',\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                    case 'full_term':\r\n                        updatedAcronym = {    \r\n                            acronym: row.acronym || '',\r\n                            full_term: newValue,\r\n                            remark: row.remark || '',\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                    case 'remark':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym || '',\r\n                            full_term: row.full_term || '',\r\n                            remark: newValue,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                }\r\n\r\n                console.log(updatedAcronym);\r\n                fetch('api/acronym/all/' + row.id, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updatedAcronym),\r\n                });\r\n\r\n                let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\r\n                let updatedData = this.state.acronyms;\r\n                updatedData[updatedAcronymIndex] = updatedAcronym;\r\n                console.log(updatedData);\r\n                this.setState({ acronyms: updatedData });\r\n\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <DataTable\r\n                    data={data}\r\n                    page={page}\r\n                    sizePerPage={pageSize}\r\n                    totalSize={totalRecords}\r\n                    onTableChange={this.handleTableChange}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;\r\n\r\n\r\n\r\n\r\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/"]},"metadata":{},"sourceType":"module"}