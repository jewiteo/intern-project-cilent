{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showAddAcronym = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AddAcronymForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 29\n        }\n      }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Acronym\",\n        ref: input => this.acronymInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }\n      }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Full Term\",\n        ref: input => this.full_termInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }\n      }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        placeholder: \"Remark\",\n        ref: input => this.remarkInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }\n      }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n          console.log(this.remarkInput.value);\n          this.addNewAcronym();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    };\n\n    this.handleTableChange = (type, {\n      page,\n      sizePerPage\n    }) => {\n      console.log(\"Page : \" + page);\n      console.log(\"Size per Page : \" + sizePerPage);\n      const offset = (page - 1) * sizePerPage;\n      this.updateAcronyms(offset, sizePerPage);\n    };\n\n    this.state = {\n      acronyms: [],\n      isLoading: true,\n      isAdding: false,\n      page: 1,\n      sizePerPage: 10\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/api/acronym/all?offset=' + (this.state.page - 1) + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body,\n      isLoading: false\n    });\n  }\n\n  async remove(id) {\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\n      this.setState({\n        acronyms: updatedAcronyms\n      });\n    });\n  }\n\n  async addNewAcronym() {\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value\n    };\n    await fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    });\n    const response = await fetch('/api/acronym/all');\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body\n    });\n  }\n\n  async updateAcronyms(offset, sizePerPage) {\n    const response = await fetch('/api/acronym/all?offset=' + offset + '&limit=' + sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body\n    });\n  }\n\n  render() {\n    const {\n      acronyms,\n      isLoading\n    } = this.state;\n    const {\n      sizePerPage,\n      page\n    } = this.state;\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 20\n        }\n      }, \"Loading... \");\n    }\n\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym'\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term'\n    }, {\n      dataField: 'remark',\n      text: 'Remarks'\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete\n    }];\n\n    const RemotePagination = ({\n      data,\n      page,\n      sizePerPage,\n      onTableChange,\n      totalSize\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      className: \"float-right\",\n      onClick: () => {\n        this.setState({\n          isAdding: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, \"Add Acronym\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }\n    }, \"Acronym List\"), this.state.isAdding ? this.showAddAcronym() : null, /*#__PURE__*/React.createElement(BootstrapTable, {\n      remote: true,\n      striped: true,\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      pagination: paginationFactory({\n        page,\n        sizePerPage,\n        totalSize\n      }),\n      onTableChange: onTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }\n    })));\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RemotePagination, {\n      data: data,\n      page: page,\n      sizePerPage: sizePerPage,\n      totalSize: 20,\n      onTableChange: this.handleTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default AcronymList;\n/*\r\nconst cellEdit = cellEditFactory({\r\n    mode: 'dbclick',\r\n    beforeSaveCell: (oldValue, newValue, row, column) => {\r\n        console.log(\"Old Value : \" + oldValue);\r\n        console.log(\"New Value : \" + newValue);\r\n        console.log(\"row/elemnt ID : \" + row.id);\r\n        console.log(\"column : \" + column.dataField);\r\n        var updatedAcronym = {\r\n            acronym: row.acronym,\r\n            full_term: row.full_term,\r\n            remark: row.remark,\r\n            id: row.id\r\n        }\r\n        switch (column.dataField) {\r\n            case 'acronym':\r\n                updatedAcronym = {\r\n                    acronym: newValue,\r\n                    full_term: row.full_term,\r\n                    remark: row.remark,\r\n                    id: row.id\r\n                };\r\n                break;\r\n            case 'full_term':\r\n                updatedAcronym = {\r\n                    acronym: row.acronym,\r\n                    full_term: newValue,\r\n                    remark: row.remark,\r\n                    id: row.id\r\n                };\r\n                break;\r\n            case 'remark':\r\n                updatedAcronym = {\r\n                    acronym: row.acronym,\r\n                    full_term: row.full_term,\r\n                    remark: newValue,\r\n                    id: row.id\r\n                };\r\n                break;\r\n        }\r\n\r\n        fetch('api/acronym/all/' + row.id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(updatedAcronym),\r\n        });\r\n\r\n    }\r\n});\r\n*/","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","BootstrapTable","ToolkitProvider","Search","cellEditFactory","paginationFactory","PaginationProvider","PaginationListStandalone","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showAddAcronym","input","acronymInput","full_termInput","remarkInput","setState","isAdding","console","log","value","addNewAcronym","handleTableChange","type","page","sizePerPage","offset","updateAcronyms","state","acronyms","isLoading","componentDidMount","response","fetch","body","json","method","headers","then","updatedAcronyms","filter","i","newAcronym","acronym","full_term","JSON","stringify","render","data","columns","dataField","text","hidden","formatter","RemotePagination","onTableChange","totalSize"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\r\n\r\n\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { acronyms: [], isLoading: true, isAdding: false, page : 1,sizePerPage : 10 };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch('/api/acronym/all?offset=' + (this.state.page - 1) + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body, isLoading: false });\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\r\n            this.setState({ acronyms: updatedAcronyms });\r\n        });\r\n\r\n    }\r\n\r\n    async addNewAcronym() {\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n\r\n        const response = await fetch('/api/acronym/all')\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body});\r\n    }\r\n\r\n    async updateAcronyms(offset,sizePerPage) {\r\n        const response = await fetch('/api/acronym/all?offset=' + offset + '&limit=' + sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body });\r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n    showAddAcronym = () => {\r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <Form>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control placeholder=\"Acronym\" ref={input => this.acronymInput = input}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                        <Button variant=\"danger\" className=\"float-right\" onClick={() => { this.setState({ isAdding: false }) }}>Cancel</Button>\r\n                        <Button variant=\"success\" className=\"float-right\" onClick={() => {\r\n                        this.setState({ isAdding: false });\r\n                        console.log(this.remarkInput.value);\r\n                        this.addNewAcronym()\r\n                        }}>Submit</Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleTableChange = (type, { page, sizePerPage }) => {\r\n        console.log(\"Page : \" + page);\r\n        console.log(\"Size per Page : \" + sizePerPage);\r\n\r\n        const offset = (page - 1) * sizePerPage;\r\n\r\n        this.updateAcronyms(offset, sizePerPage);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { acronyms, isLoading } = this.state;\r\n        const { sizePerPage, page } = this.state;\r\n\r\n\r\n        if (isLoading) {\r\n            return <p>Loading... </p>;\r\n        }\r\n\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id', \r\n            hidden: true\r\n        }, {\r\n            dataField: 'acronym',\r\n            text: 'Acronym'\r\n        }, {\r\n            dataField: 'full_term',\r\n            text: 'Full Term'\r\n        }, {\r\n            dataField: 'remark',\r\n            text: 'Remarks'\r\n        }, {\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete\r\n            }];\r\n\r\n        const RemotePagination = ({ data, page, sizePerPage, onTableChange, totalSize }) => (\r\n            <div>\r\n                <Container fluid>\r\n                    <Button variant=\"success\" className=\"float-right\" onClick={() => { this.setState({ isAdding: true }) }}>Add Acronym</Button>\r\n                    <h2>Acronym List</h2>\r\n\r\n                    {this.state.isAdding ? this.showAddAcronym() : null}\r\n                    \r\n                    <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        onTableChange={onTableChange}\r\n                    />\r\n                       \r\n                    \r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <RemotePagination\r\n                    data={data}\r\n                    page={page}\r\n                    sizePerPage={sizePerPage}\r\n                    totalSize={20}\r\n                    onTableChange={this.handleTableChange}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;\r\n\r\n\r\n\r\n\r\n/*\r\nconst cellEdit = cellEditFactory({\r\n    mode: 'dbclick',\r\n    beforeSaveCell: (oldValue, newValue, row, column) => {\r\n        console.log(\"Old Value : \" + oldValue);\r\n        console.log(\"New Value : \" + newValue);\r\n        console.log(\"row/elemnt ID : \" + row.id);\r\n        console.log(\"column : \" + column.dataField);\r\n        var updatedAcronym = {\r\n            acronym: row.acronym,\r\n            full_term: row.full_term,\r\n            remark: row.remark,\r\n            id: row.id\r\n        }\r\n        switch (column.dataField) {\r\n            case 'acronym':\r\n                updatedAcronym = {\r\n                    acronym: newValue,\r\n                    full_term: row.full_term,\r\n                    remark: row.remark,\r\n                    id: row.id\r\n                };\r\n                break;\r\n            case 'full_term':\r\n                updatedAcronym = {\r\n                    acronym: row.acronym,\r\n                    full_term: newValue,\r\n                    remark: row.remark,\r\n                    id: row.id\r\n                };\r\n                break;\r\n            case 'remark':\r\n                updatedAcronym = {\r\n                    acronym: row.acronym,\r\n                    full_term: row.full_term,\r\n                    remark: newValue,\r\n                    id: row.id\r\n                };\r\n                break;\r\n        }\r\n\r\n        fetch('api/acronym/all/' + row.id, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(updatedAcronym),\r\n        });\r\n\r\n    }\r\n});\r\n*/"]},"metadata":{},"sourceType":"module"}