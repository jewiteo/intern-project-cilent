{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showAddAcronym = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AddAcronymForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }\n      }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Acronym\",\n        ref: input => this.acronymInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 29\n        }\n      }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Full Term\",\n        ref: input => this.full_termInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }\n      }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        placeholder: \"Remark\",\n        ref: input => this.remarkInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n          console.log(this.remarkInput.value);\n          this.addNewAcronym();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    };\n\n    this.state = {\n      acronyms: [],\n      isLoading: true,\n      isAdding: false\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/api/acronym/all');\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body,\n      isLoading: false\n    });\n  }\n\n  async remove(id) {\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\n      this.setState({\n        acronyms: updatedAcronyms\n      });\n    });\n  }\n\n  async addNewAcronym() {\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value\n    };\n    await fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    });\n    const response = await fetch('/api/acronym/all');\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body\n    });\n  }\n\n  async updateAcronym() {}\n\n  render() {\n    const {\n      acronyms,\n      isLoading\n    } = this.state;\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 20\n        }\n      }, \"Loading... \");\n    } //Using normal Table from React Bootstrap\n\n    /* const AcronymList = acronyms.map(acronym => {\r\n         \r\n         return (<tr key={acronym.id}>\r\n             <td>{acronym.acronym}</td>\r\n             <td>{acronym.full_term}</td>\r\n             <td>{acronym.remark || ''}</td>\r\n               <td>\r\n                 <ButtonGroup>\r\n                     <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(acronym.id)}>Delete</Button>\r\n                 </ButtonGroup>\r\n             </td>\r\n           </tr>);\r\n       });\r\n         return (\r\n         <div>\r\n             <Container fluid>\r\n                 <Button variant=\"success\" className=\"float-right\">Add Acronym</Button>\r\n                 <h2>Acronym List</h2>\r\n                 <Table>\r\n                     <thead>\r\n                         <tr>\r\n                             <th width=\"20%\">Acronym</th>\r\n                             <th width=\"20%\">Full Term</th>\r\n                             <th>Remark</th>\r\n                             <th width=\"10%\">Actions</th>\r\n                           </tr>\r\n                     </thead>\r\n                     <tbody>\r\n                         {AcronymList}\r\n                     </tbody>\r\n                 </Table>\r\n             </Container>\r\n         </div>\r\n     );\r\n      */\n    //Using React Bootstrap Table 2\n    // <BootstrapTable keyField='id' data={data} columns={ columns }/>\n\n\n    const {\n      SearchBar\n    } = Search;\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym'\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term'\n    }, {\n      dataField: 'remark',\n      text: 'Remarks'\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete\n    }];\n    const cellEdit = cellEditFactory({\n      mode: 'dbclick',\n      beforeSaveCell: (oldValue, newValue, row, column) => {\n        console.log(\"Old Value : \" + oldValue);\n        console.log(\"New Value : \" + newValue);\n        console.log(\"row/elemnt ID : \" + row.id);\n        console.log(\"column : \" + column.dataField);\n        var updatedAcronym = {\n          acronym: row.acronym,\n          full_term: row.full_term,\n          remark: row.remark,\n          id: row.id\n        };\n\n        switch (column.dataField) {\n          case 'acronym':\n            updatedAcronym = {\n              acronym: newValue,\n              full_term: row.full_term,\n              remark: row.remark,\n              id: row.id\n            };\n            break;\n\n          case 'full_term':\n            updatedAcronym = {\n              acronym: row.acronym,\n              full_term: newValue,\n              remark: row.remark,\n              id: row.id\n            };\n            break;\n\n          case 'remark':\n            updatedAcronym = {\n              acronym: row.acronym,\n              full_term: row.full_term,\n              remark: newValue,\n              id: row.id\n            };\n            break;\n        }\n\n        fetch('api/acronym/all/' + row.id, {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedAcronym)\n        });\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      className: \"float-right\",\n      onClick: () => {\n        this.setState({\n          isAdding: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }\n    }, \"Add Acronym\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }, \"Acronym List\"), this.state.isAdding ? this.showAddAcronym() : null, /*#__PURE__*/React.createElement(ToolkitProvider, {\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      search: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }\n    }, props => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 37\n      }\n    }, \"Search Bar\"), /*#__PURE__*/React.createElement(SearchBar, Object.assign({}, props.searchProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({\n      cellEdit: cellEdit\n    }, props.baseProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 37\n      }\n    }))))));\n  }\n\n}\n\nexport default AcronymList;","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","BootstrapTable","ToolkitProvider","Search","cellEditFactory","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showAddAcronym","input","acronymInput","full_termInput","remarkInput","setState","isAdding","console","log","value","addNewAcronym","state","acronyms","isLoading","componentDidMount","response","fetch","body","json","method","headers","then","updatedAcronyms","filter","i","newAcronym","acronym","full_term","JSON","stringify","updateAcronym","render","SearchBar","data","columns","dataField","text","hidden","formatter","cellEdit","mode","beforeSaveCell","oldValue","newValue","column","updatedAcronym","remark","searchProps","baseProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\n\r\n\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { acronyms: [], isLoading: true, isAdding: false };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch('/api/acronym/all')\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body, isLoading: false });\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\r\n            this.setState({ acronyms: updatedAcronyms });\r\n        });\r\n\r\n    }\r\n\r\n    async addNewAcronym() {\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n\r\n        const response = await fetch('/api/acronym/all')\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body});\r\n    }\r\n\r\n    async updateAcronym() {\r\n\r\n\r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n\r\n    showAddAcronym = () => {\r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <Form>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control placeholder=\"Acronym\" ref={input => this.acronymInput = input}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                        <Button variant=\"danger\" className=\"float-right\" onClick={() => { this.setState({ isAdding: false }) }}>Cancel</Button>\r\n                        <Button variant=\"success\" className=\"float-right\" onClick={() => {\r\n                        this.setState({ isAdding: false });\r\n                        console.log(this.remarkInput.value);\r\n                        this.addNewAcronym()\r\n                        }}>Submit</Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const { acronyms, isLoading } = this.state;\r\n\r\n        if (isLoading) {\r\n            return <p>Loading... </p>;\r\n        }\r\n\r\n       //Using normal Table from React Bootstrap\r\n       /* const AcronymList = acronyms.map(acronym => {\r\n            \r\n            return (<tr key={acronym.id}>\r\n                <td>{acronym.acronym}</td>\r\n                <td>{acronym.full_term}</td>\r\n                <td>{acronym.remark || ''}</td>\r\n\r\n                <td>\r\n                    <ButtonGroup>\r\n                        <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(acronym.id)}>Delete</Button>\r\n                    </ButtonGroup>\r\n                </td>\r\n\r\n            </tr>);\r\n\r\n        });\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Button variant=\"success\" className=\"float-right\">Add Acronym</Button>\r\n                    <h2>Acronym List</h2>\r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th width=\"20%\">Acronym</th>\r\n                                <th width=\"20%\">Full Term</th>\r\n                                <th>Remark</th>\r\n                                <th width=\"10%\">Actions</th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {AcronymList}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n            </div>\r\n        );\r\n         */\r\n\r\n        //Using React Bootstrap Table 2\r\n\r\n        // <BootstrapTable keyField='id' data={data} columns={ columns }/>\r\n\r\n        const { SearchBar } = Search;\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id', \r\n            hidden: true\r\n        }, {\r\n            dataField: 'acronym',\r\n            text: 'Acronym'\r\n        }, {\r\n            dataField: 'full_term',\r\n            text: 'Full Term'\r\n        }, {\r\n            dataField: 'remark',\r\n            text: 'Remarks'\r\n        }, {\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete\r\n            }];\r\n\r\n        const cellEdit = cellEditFactory({\r\n            mode: 'dbclick',\r\n            beforeSaveCell: (oldValue, newValue, row, column) => {\r\n                console.log(\"Old Value : \" + oldValue);\r\n                console.log(\"New Value : \" + newValue);\r\n                console.log(\"row/elemnt ID : \" + row.id);\r\n                console.log(\"column : \" + column.dataField);\r\n                var updatedAcronym = {\r\n                    acronym: row.acronym,\r\n                    full_term: row.full_term,\r\n                    remark: row.remark,\r\n                    id: row.id\r\n                }\r\n                switch (column.dataField) {\r\n                    case 'acronym':\r\n                        updatedAcronym = {\r\n                            acronym: newValue,\r\n                            full_term: row.full_term,\r\n                            remark: row.remark,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                    case 'full_term':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym,\r\n                            full_term: newValue,\r\n                            remark: row.remark,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                    case 'remark':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym,\r\n                            full_term: row.full_term,\r\n                            remark: newValue,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                }\r\n\r\n                fetch('api/acronym/all/' + row.id, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updatedAcronym),\r\n                });\r\n\r\n            }\r\n        }); \r\n\r\n\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Button variant=\"success\" className=\"float-right\" onClick={() => { this.setState({ isAdding: true }) }}>Add Acronym</Button>\r\n                    <h2>Acronym List</h2>\r\n\r\n                    {this.state.isAdding ? this.showAddAcronym() : null}\r\n\r\n                    <ToolkitProvider\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        search\r\n                    >\r\n                        {\r\n                            props => (\r\n                                <div>\r\n                                    <h3>Search Bar</h3>\r\n                                    <SearchBar {...props.searchProps} />\r\n                                    <hr />\r\n                                    <BootstrapTable cellEdit={ cellEdit }\r\n                                        {...props.baseProps}\r\n                                    />\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </ToolkitProvider>\r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;"]},"metadata":{},"sourceType":"module"}