{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showAddAcronym = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AddAcronymForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 29\n        }\n      }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Acronym\",\n        ref: input => this.acronymInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 29\n        }\n      }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Full Term\",\n        ref: input => this.full_termInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        placeholder: \"Remark\",\n        ref: input => this.remarkInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 25\n        }\n      }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false\n          });\n          console.log(this.remarkInput.value);\n          this.addNewAcronym();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    };\n\n    this.handleTableChange = (type, {\n      page,\n      sizePerPage,\n      filters\n    }) => {\n      //console.log(\"Page : \" + page);\n      //console.log(\"Size per Page : \" + sizePerPage);\n      console.log(\"Type : \" + type);\n      const offset = (page - 1) * sizePerPage;\n\n      if (type === 'pagination' || type === 'cellEdit') {\n        setTimeout(() => {\n          this.updateAcronyms(offset, sizePerPage);\n          this.setState({\n            page: page,\n            sizePerPage: sizePerPage\n          });\n        }, 1500);\n      }\n\n      if (type === 'filter') {\n        for (const dataField in filters) {\n          console.log(\"Datafield : \" + dataField);\n          const {\n            filterVal\n          } = filters[dataField];\n          console.log(\"filterVal : \" + filterVal);\n\n          if (dataField === 'acronym') {\n            this.findAcronym(filterVal);\n          }\n        }\n      }\n    };\n\n    this.state = {\n      acronyms: [],\n      isLoading: true,\n      isAdding: false,\n      page: 1,\n      sizePerPage: 10\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/api/acronym/all?offset=' + (this.state.page - 1) + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    const responseSize = await fetch('/api/acronym/all/count');\n    const sizeResult = await responseSize.json();\n    console.log(sizeResult);\n    this.setState({\n      acronyms: body,\n      isLoading: false,\n      totalSize: sizeResult\n    });\n  }\n\n  async remove(id) {\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\n      this.setState({\n        acronyms: updatedAcronyms\n      });\n    });\n  }\n\n  async addNewAcronym() {\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value\n    };\n    await fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    });\n    const response = await fetch('/api/acronym/all');\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body\n    });\n  }\n\n  async updateAcronyms(offset, sizePerPage) {\n    const response = await fetch('/api/acronym/all?offset=' + offset + '&limit=' + sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    this.setState({\n      acronyms: body\n    });\n  }\n\n  async findAcronym(filterVal) {\n    const response = await fetch('/api/acronym/all/' + filterVal + '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    const responseSize = await fetch('/api/acronym/all/' + filterVal + 'count');\n    const sizeResult = await responseSize.json();\n    this.setState({\n      acronyms: body,\n      totalSize: sizeResult,\n      page: 1\n    });\n  }\n\n  render() {\n    const {\n      acronyms,\n      isLoading\n    } = this.state;\n    const {\n      sizePerPage,\n      page,\n      totalSize\n    } = this.state;\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 20\n        }\n      }, \"Loading... \");\n    }\n\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym',\n      filter: textFilter()\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term',\n      filter: textFilter()\n    }, {\n      dataField: 'remark',\n      text: 'Remarks'\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete\n    }];\n\n    const DataTable = ({\n      data,\n      page,\n      sizePerPage,\n      onTableChange,\n      totalSize\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      className: \"float-right\",\n      onClick: () => {\n        this.setState({\n          isAdding: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, \"Add Acronym\"), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 21\n      }\n    }, \"Acronym List\"), this.state.isAdding ? this.showAddAcronym() : null, /*#__PURE__*/React.createElement(BootstrapTable, {\n      remote: {\n        filter: true\n      },\n      striped: true,\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      pagination: paginationFactory({\n        page,\n        sizePerPage,\n        totalSize\n      }),\n      cellEdit: cellEdit,\n      filter: filterFactory(),\n      onTableChange: onTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    })));\n\n    const cellEdit = cellEditFactory({\n      mode: 'dbclick',\n      beforeSaveCell: (oldValue, newValue, row, column) => {\n        console.log(\"Old Value : \" + oldValue);\n        console.log(\"New Value : \" + newValue);\n        console.log(\"row/elemnt ID : \" + row.id);\n        console.log(\"column : \" + column.dataField);\n        var updatedAcronym = {\n          acronym: row.acronym,\n          full_term: row.full_term,\n          remark: row.remark,\n          id: row.id\n        };\n\n        switch (column.dataField) {\n          case 'acronym':\n            updatedAcronym = {\n              acronym: newValue,\n              full_term: row.full_term,\n              remark: row.remark,\n              id: row.id\n            };\n            break;\n\n          case 'full_term':\n            updatedAcronym = {\n              acronym: row.acronym,\n              full_term: newValue,\n              remark: row.remark,\n              id: row.id\n            };\n            break;\n\n          case 'remark':\n            updatedAcronym = {\n              acronym: row.acronym,\n              full_term: row.full_term,\n              remark: newValue,\n              id: row.id\n            };\n            break;\n        }\n\n        fetch('api/acronym/all/' + row.id, {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedAcronym)\n        });\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DataTable, {\n      data: data,\n      page: page,\n      sizePerPage: sizePerPage,\n      totalSize: totalSize,\n      onTableChange: this.handleTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default AcronymList;\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","BootstrapTable","filterFactory","textFilter","cellEditFactory","paginationFactory","PaginationProvider","PaginationListStandalone","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showAddAcronym","input","acronymInput","full_termInput","remarkInput","setState","isAdding","console","log","value","addNewAcronym","handleTableChange","type","page","sizePerPage","filters","offset","setTimeout","updateAcronyms","dataField","filterVal","findAcronym","state","acronyms","isLoading","componentDidMount","response","fetch","body","json","responseSize","sizeResult","totalSize","method","headers","then","updatedAcronyms","filter","i","newAcronym","acronym","full_term","JSON","stringify","render","data","columns","text","hidden","formatter","DataTable","onTableChange","cellEdit","mode","beforeSaveCell","oldValue","newValue","column","updatedAcronym","remark"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\r\n\r\n\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { acronyms: [], isLoading: true, isAdding: false, page : 1,sizePerPage : 10 };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const response = await fetch('/api/acronym/all?offset=' + (this.state.page - 1) + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        const responseSize = await fetch('/api/acronym/all/count');\r\n        const sizeResult = await responseSize.json();\r\n        console.log(sizeResult);\r\n        this.setState({ acronyms: body, isLoading: false, totalSize: sizeResult });\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(() => {\r\n            let updatedAcronyms = [...this.state.acronyms].filter(i => i.id !== id);\r\n            this.setState({ acronyms: updatedAcronyms });\r\n        });\r\n\r\n    }\r\n\r\n    async addNewAcronym() {\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n\r\n        const response = await fetch('/api/acronym/all')\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body});\r\n    }\r\n\r\n    async updateAcronyms(offset,sizePerPage) {\r\n        const response = await fetch('/api/acronym/all?offset=' + offset + '&limit=' + sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        this.setState({ acronyms: body });\r\n    }\r\n\r\n    async findAcronym(filterVal) {\r\n        const response = await fetch('/api/acronym/all/' + filterVal +\r\n            '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        const responseSize = await fetch('/api/acronym/all/' + filterVal + 'count');\r\n        const sizeResult = await responseSize.json();\r\n        this.setState({ acronyms: body, totalSize: sizeResult, page: 1 });\r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n    showAddAcronym = () => {\r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <Form>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control placeholder=\"Acronym\" ref={input => this.acronymInput = input}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                        <Button variant=\"danger\" className=\"float-right\" onClick={() => { this.setState({ isAdding: false }) }}>Cancel</Button>\r\n                        <Button variant=\"success\" className=\"float-right\" onClick={() => {\r\n                        this.setState({ isAdding: false });\r\n                        console.log(this.remarkInput.value);\r\n                        this.addNewAcronym()\r\n                        }}>Submit</Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleTableChange = (type, { page, sizePerPage , filters}) => {\r\n        //console.log(\"Page : \" + page);\r\n        //console.log(\"Size per Page : \" + sizePerPage);\r\n        console.log(\"Type : \" + type);\r\n\r\n        const offset = (page - 1) * sizePerPage;\r\n\r\n        if (type === 'pagination' || type === 'cellEdit') {\r\n            setTimeout(() => {\r\n                        this.updateAcronyms(offset, sizePerPage);\r\n                        this.setState({ page: page, sizePerPage: sizePerPage });\r\n            }, 1500);\r\n        }\r\n\r\n        if (type === 'filter') {\r\n            for (const dataField in filters) {\r\n                console.log(\"Datafield : \" + dataField);\r\n                const { filterVal } = filters[dataField];\r\n                console.log(\"filterVal : \" + filterVal);\r\n\r\n                if (dataField === 'acronym') {\r\n                    this.findAcronym(filterVal);\r\n                }\r\n\r\n\r\n            }\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { acronyms, isLoading } = this.state;\r\n        const { sizePerPage, page, totalSize } = this.state;\r\n\r\n\r\n        if (isLoading) {\r\n            return <p>Loading... </p>;\r\n        }\r\n\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id', \r\n            hidden: true\r\n        }, {\r\n            dataField: 'acronym',\r\n            text: 'Acronym',\r\n            filter: textFilter()\r\n        }, {\r\n            dataField: 'full_term',\r\n            text: 'Full Term',\r\n            filter: textFilter()\r\n        }, {\r\n            dataField: 'remark',\r\n            text: 'Remarks'\r\n        }, {\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete\r\n            }];\r\n\r\n        const DataTable = ({ data, page, sizePerPage, onTableChange, totalSize }) => (\r\n            <div>\r\n                <Container fluid>\r\n                    <Button variant=\"success\" className=\"float-right\" onClick={() => { this.setState({ isAdding: true }) }}>Add Acronym</Button>\r\n                    <h2>Acronym List</h2>\r\n\r\n                    {this.state.isAdding ? this.showAddAcronym() : null}\r\n\r\n                    <BootstrapTable\r\n                        remote={{ filter: true }}\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={cellEdit}\r\n                        filter={filterFactory()}\r\n                        onTableChange={onTableChange}\r\n                    />\r\n                    \r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n        const cellEdit = cellEditFactory({\r\n            mode: 'dbclick',\r\n            beforeSaveCell: (oldValue, newValue, row, column) => {\r\n                console.log(\"Old Value : \" + oldValue);\r\n                console.log(\"New Value : \" + newValue);\r\n                console.log(\"row/elemnt ID : \" + row.id);\r\n                console.log(\"column : \" + column.dataField);\r\n                var updatedAcronym = {\r\n                    acronym: row.acronym,\r\n                    full_term: row.full_term,\r\n                    remark: row.remark,\r\n                    id: row.id\r\n                }\r\n                switch (column.dataField) {\r\n                    case 'acronym':\r\n                        updatedAcronym = {\r\n                            acronym: newValue,\r\n                            full_term: row.full_term,\r\n                            remark: row.remark,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                    case 'full_term':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym,\r\n                            full_term: newValue,\r\n                            remark: row.remark,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                    case 'remark':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym,\r\n                            full_term: row.full_term,\r\n                            remark: newValue,\r\n                            id: row.id\r\n                        };\r\n                        break;\r\n                }\r\n\r\n                fetch('api/acronym/all/' + row.id, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updatedAcronym),\r\n                });\r\n\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <DataTable\r\n                    data={data}\r\n                    page={page}\r\n                    sizePerPage={sizePerPage}\r\n                    totalSize={totalSize}\r\n                    onTableChange={this.handleTableChange}\r\n                />\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;\r\n\r\n\r\n\r\n\r\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/"]},"metadata":{},"sourceType":"module"}