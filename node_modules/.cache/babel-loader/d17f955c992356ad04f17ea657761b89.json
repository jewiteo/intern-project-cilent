{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jewi\\\\test-frontend-ssp\\\\src\\\\AcronymList.js\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Form, Row, Col, DropdownButton, Dropdown } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport cellEditFactory from 'react-bootstrap-table2-editor';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport InputBase from '@material-ui/core/InputBase';\nvar oldSearchId;\nvar languages = [\"ENGLISH\", \"CHINESE\", \"MALAY\", \"TAMIL\", \"KOREAN\"];\n\nclass AcronymList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buttonDelete = (cell, row, rowIndex, formatExtraData) => {\n      return /*#__PURE__*/React.createElement(Button, {\n        size: \"sm\",\n        variant: \"danger\",\n        onClick: () => this.remove(row.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, \"Delete\");\n    };\n\n    this.showHistory = () => {\n      const columns = [{\n        dataField: 'id',\n        text: 'Changes'\n      }];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        fluid: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BootstrapTable, {\n        remote: true,\n        keyField: \"id\",\n        data: [\"history 1\", \"history 2\"],\n        columns: columns,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      })));\n    };\n\n    this.showAddAcronym = () => {\n      const handleSelect = e => {\n        console.log(e);\n        this.setState({\n          language: e\n        });\n      };\n\n      let populateDropdown = languages.map(function (item, i) {\n        return /*#__PURE__*/React.createElement(Dropdown.Item, {\n          eventKey: item,\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 17\n          }\n        }, item);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AddAcronymForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 29\n        }\n      }, \"Acronym\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Acronym\",\n        ref: input => this.acronymInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 29\n        }\n      }, \"Full Term\"), /*#__PURE__*/React.createElement(Form.Control, {\n        placeholder: \"Full Term\",\n        ref: input => this.full_termInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 29\n        }\n      }, \"Remarks/Comments\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        placeholder: \"Remark\",\n        ref: input => this.remarkInput = input,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(Row, {\n        className: \"RowMargin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DropdownButton, {\n        title: this.state.language,\n        onSelect: handleSelect,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 25\n        }\n      }, populateDropdown)), /*#__PURE__*/React.createElement(Button, {\n        variant: \"success\",\n        className: \"float-right\",\n        onClick: () => {\n          this.setState({\n            isAdding: false,\n            language: \"ENGLISH\"\n          });\n          console.log(this.remarkInput.value);\n          this.addNewAcronym();\n          this.remarkInput.value = \"\";\n          this.acronymInput.value = \"\";\n          this.full_termInput.value = \"\";\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }\n      }, \"Submit\")));\n    };\n\n    this.handleTableChange = (type, {\n      page,\n      sizePerPage\n    }) => {\n      const {\n        searchTerm\n      } = this.state;\n      const pageSize = sizePerPage;\n      console.log(\"Type : \" + type);\n      console.log(\"page : \" + page);\n      console.log(\"pageSize : \" + pageSize);\n\n      if (type === 'pagination') {\n        const params = this.getRequestParams(searchTerm, page, pageSize);\n        console.log(params);\n        this.retrieveAcronym(params);\n        this.setState({\n          page: page,\n          pageSize: sizePerPage\n        });\n      }\n    };\n\n    this.onSelectRow = (row, isSelect, rowIndex, e) => {\n      var date = new Date();\n      var timestamp = date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate() + \"\\t\" + date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      if (isSelect) {\n        console.log(timestamp);\n        this.setState(() => ({\n          selected: [row.id],\n          isSelected: true\n        }));\n      } else {\n        this.setState(() => ({\n          selected: [],\n          isSelected: false\n        }));\n      }\n    };\n\n    this.state = {\n      acronyms: [],\n      searchTerm: '',\n      selected: [],\n      isSelected: false,\n      page: 1,\n      pageSize: 10,\n      totalRecords: 0,\n      language: \"ENGLISH\"\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      searchTerm,\n      page,\n      pageSize\n    } = this.state;\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async retrieveAcronym(params) {\n    if (params.search) {\n      if (languages.includes(params.search.toUpperCase())) {\n        console.log(\"Found languages\");\n        const response = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '?offset=' + params.offset + '&limit=' + params.pageSize);\n        const data = await response.json();\n        const responseSize = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '/count');\n        const totalRecord = await responseSize.json();\n        this.setState({\n          acronyms: data,\n          totalRecords: totalRecord\n        });\n      } else {\n        const response = await fetch('/api/acronym/all/' + params.search + '?offset=' + params.offset + '&limit=' + params.pageSize);\n        const data = await response.json();\n        const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\n        const totalRecord = await responseSize.json();\n        this.setState({\n          acronyms: data,\n          totalRecords: totalRecord\n        });\n      }\n    } else {\n      const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\n      const data = await response.json();\n      console.log(data);\n      const responseSize = await fetch('/api/acronym/all/count');\n      const totalRecord = await responseSize.json();\n      this.setState({\n        acronyms: data,\n        totalRecords: totalRecord\n      });\n    }\n  }\n\n  getRequestParams(searchTerm, page, pageSize) {\n    let params = {};\n    let offset = 0;\n\n    if (searchTerm) {\n      params[\"search\"] = searchTerm;\n    }\n\n    if (page) {\n      params[\"page\"] = page - 1;\n      offset = (page - 1) * pageSize;\n      console.log(offset);\n      params[\"offset\"] = offset;\n    }\n\n    if (pageSize) {\n      params[\"pageSize\"] = pageSize;\n    }\n\n    return params;\n  }\n\n  async remove(id) {\n    const {\n      searchTerm,\n      page,\n      pageSize\n    } = this.state;\n    await fetch('/api/acronym/all/' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async addNewAcronym() {\n    const {\n      searchTerm,\n      page,\n      pageSize,\n      language\n    } = this.state;\n    console.log(language);\n    const newAcronym = {\n      acronym: this.acronymInput.value,\n      full_term: this.full_termInput.value,\n      remark: this.remarkInput.value,\n      language: language\n    };\n    await fetch('api/acronym/new', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newAcronym)\n    });\n    const params = this.getRequestParams(searchTerm, page, pageSize);\n    await this.retrieveAcronym(params);\n  }\n\n  async findAcronym(filterVal) {\n    const response = await fetch('/api/acronym/all/' + filterVal + '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\n    const body = await response.json();\n    console.log(body);\n    const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\n    const sizeResult = await responseSize.json();\n    this.setState({\n      acronyms: body,\n      totalSize: sizeResult,\n      page: 1\n    });\n  }\n\n  onSearchTerm(e) {\n    var tempSearchTerm = e.target.value;\n\n    if (oldSearchId !== null) {\n      clearTimeout(oldSearchId);\n    }\n\n    const onSearchTerm = setTimeout(() => {\n      console.log(tempSearchTerm);\n      this.setState({\n        searchTerm: tempSearchTerm,\n        page: 1\n      });\n      const {\n        searchTerm,\n        page,\n        pageSize\n      } = this.state;\n      const formattedParams = this.getRequestParams(searchTerm, page, pageSize);\n      this.retrieveAcronym(formattedParams);\n    }, 1000);\n    oldSearchId = onSearchTerm;\n  }\n\n  render() {\n    const {\n      pageSize,\n      page,\n      totalRecords,\n      acronyms,\n      selected\n    } = this.state;\n    const data = acronyms;\n    const columns = [{\n      dataField: 'id',\n      text: 'acronym id',\n      hidden: true\n    }, {\n      dataField: 'acronym',\n      text: 'Acronym',\n      headerStyle: () => {\n        return {\n          width: \"10%\"\n        };\n      }\n    }, {\n      dataField: 'full_term',\n      text: 'Full Term',\n      headerStyle: () => {\n        return {\n          width: \"40%\"\n        };\n      }\n    }, {\n      dataField: 'remark',\n      text: 'Remarks',\n      headerStyle: () => {\n        return {\n          width: \"35%\"\n        };\n      }\n    }, {\n      dataField: 'language',\n      text: 'Language',\n      editable: false,\n      headerStyle: () => {\n        return {\n          width: \"10%\"\n        };\n      }\n    }, {\n      dataField: 'actions',\n      text: 'Actions',\n      formatter: this.buttonDelete,\n      headerStyle: () => {\n        return {\n          width: \"5.5%\"\n        };\n      }\n    }];\n    const selectRow = {\n      mode: 'checkbox',\n      hideSelectColumn: true,\n      clickToSelect: true,\n      clickToEdit: true,\n      bgColor: '#8CB0F9',\n      selected: selected,\n      onSelect: this.onSelectRow\n    };\n\n    const DataTable = ({\n      data,\n      page,\n      sizePerPage,\n      onTableChange,\n      totalSize\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, {\n      remote: true,\n      striped: true,\n      keyField: \"id\",\n      data: data,\n      columns: columns,\n      pagination: paginationFactory({\n        page,\n        sizePerPage,\n        totalSize\n      }),\n      cellEdit: cellEdit,\n      onTableChange: onTableChange,\n      selectRow: selectRow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    })));\n\n    const cellEdit = cellEditFactory({\n      mode: 'dbclick',\n      beforeSaveCell: (oldValue, newValue, row, column) => {\n        console.log(\"Old Value : \" + oldValue);\n        console.log(\"New Value : \" + newValue); //console.log(\"row/elemnt ID : \" + row.id);\n        //console.log(\"column : \" + column.dataField);\n\n        var updatedAcronym = {\n          acronym: row.acronym || '',\n          full_term: row.full_term || '',\n          remark: row.remark || '',\n          id: row.id,\n          language: row.language\n        };\n\n        switch (column.dataField) {\n          case 'acronym':\n            updatedAcronym = {\n              acronym: newValue,\n              full_term: row.full_term || '',\n              remark: row.remark || '',\n              id: row.id,\n              language: row.language\n            };\n            break;\n\n          case 'full_term':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: newValue,\n              remark: row.remark || '',\n              id: row.id,\n              language: row.language\n            };\n            break;\n\n          case 'remark':\n            updatedAcronym = {\n              acronym: row.acronym || '',\n              full_term: row.full_term || '',\n              remark: newValue,\n              id: row.id,\n              language: row.language\n            };\n            break;\n        }\n\n        console.log(updatedAcronym);\n        fetch('api/acronym/all/' + row.id, {\n          method: 'PUT',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(updatedAcronym)\n        });\n        let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\n        let updatedData = this.state.acronyms;\n        updatedData[updatedAcronymIndex] = updatedAcronym;\n        console.log(updatedData);\n        this.setState({\n          acronyms: updatedData\n        });\n      }\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    }, \"Acronym List\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 17\n      }\n    }, this.showAddAcronym()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputBase, {\n      type: \"text\",\n      fullWidth: true,\n      placeholder: \"Search by Acronym\",\n      onChange: this.onSearchTerm.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DataTable, {\n      data: data,\n      page: page,\n      sizePerPage: pageSize,\n      totalSize: totalRecords,\n      onTableChange: this.handleTableChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 17\n      }\n    }, this.state.isSelected ? this.showHistory() : null));\n  }\n\n}\n\nexport default AcronymList;\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/","map":{"version":3,"sources":["C:/Users/Jewi/test-frontend-ssp/src/AcronymList.js"],"names":["React","Component","Button","Container","Form","Row","Col","DropdownButton","Dropdown","BootstrapTable","cellEditFactory","paginationFactory","InputBase","oldSearchId","languages","AcronymList","constructor","props","buttonDelete","cell","row","rowIndex","formatExtraData","remove","id","showHistory","columns","dataField","text","showAddAcronym","handleSelect","e","console","log","setState","language","populateDropdown","map","item","i","input","acronymInput","full_termInput","remarkInput","state","isAdding","value","addNewAcronym","handleTableChange","type","page","sizePerPage","searchTerm","pageSize","params","getRequestParams","retrieveAcronym","onSelectRow","isSelect","date","Date","timestamp","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","selected","isSelected","acronyms","totalRecords","componentDidMount","search","includes","toUpperCase","response","fetch","offset","data","json","responseSize","totalRecord","method","headers","newAcronym","acronym","full_term","remark","body","JSON","stringify","findAcronym","filterVal","sizeResult","totalSize","onSearchTerm","tempSearchTerm","target","clearTimeout","setTimeout","formattedParams","render","hidden","headerStyle","width","editable","formatter","selectRow","mode","hideSelectColumn","clickToSelect","clickToEdit","bgColor","onSelect","DataTable","onTableChange","cellEdit","beforeSaveCell","oldValue","newValue","column","updatedAcronym","updatedAcronymIndex","findIndex","updatedData","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Container, Form, Row, Col, DropdownButton, Dropdown } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nvar oldSearchId;\r\nvar languages = [\"ENGLISH\", \"CHINESE\",\"MALAY\",\"TAMIL\",\"KOREAN\"];\r\n\r\nclass AcronymList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            acronyms: [],\r\n            searchTerm: '',\r\n            selected: [],\r\n            isSelected: false,\r\n\r\n            page: 1,\r\n            pageSize: 10,\r\n            totalRecords: 0,\r\n\r\n            language: \"ENGLISH\"\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const { searchTerm, page, pageSize } = this.state;\r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    }\r\n\r\n    async retrieveAcronym(params) {\r\n\r\n        if (params.search) {\r\n            if (languages.includes(params.search.toUpperCase())) {\r\n                console.log(\"Found languages\");\r\n                const response = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() +\r\n                    '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n                const data = await response.json();\r\n                const responseSize = await fetch('/api/acronym/all/language/' + params.search.toUpperCase() + '/count');\r\n                const totalRecord = await responseSize.json();\r\n                this.setState({ acronyms: data, totalRecords: totalRecord });\r\n            } else {\r\n                const response = await fetch('/api/acronym/all/' + params.search +\r\n                    '?offset=' + params.offset + '&limit=' + params.pageSize);\r\n                const data = await response.json();\r\n                const responseSize = await fetch('/api/acronym/all/' + params.search + '/count');\r\n                const totalRecord = await responseSize.json();\r\n                this.setState({ acronyms: data, totalRecords: totalRecord });\r\n            }\r\n        } else {\r\n            const response = await fetch('/api/acronym/all?offset=' + params.offset + '&limit=' + params.pageSize);\r\n            const data = await response.json();\r\n            console.log(data);\r\n            const responseSize = await fetch('/api/acronym/all/count');\r\n            const totalRecord = await responseSize.json();\r\n\r\n            this.setState({ acronyms: data, totalRecords: totalRecord });\r\n        }\r\n    }\r\n\r\n    getRequestParams(searchTerm, page, pageSize) {\r\n        let params = {};\r\n        let offset = 0;\r\n\r\n        if (searchTerm) {\r\n            params[\"search\"] = searchTerm;\r\n        }\r\n\r\n        if (page) {\r\n            params[\"page\"] = page - 1;\r\n            offset = (page - 1) * pageSize;\r\n            console.log(offset);\r\n            params[\"offset\"] = offset;\r\n        }\r\n\r\n        if (pageSize) {\r\n            params[\"pageSize\"] = pageSize;\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n    async remove(id) {\r\n\r\n        const { searchTerm, page, pageSize } = this.state;\r\n        \r\n        await fetch('/api/acronym/all/'+id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    }\r\n\r\n    async addNewAcronym() {\r\n        const { searchTerm, page, pageSize, language } = this.state;\r\n        console.log(language);\r\n\r\n        const newAcronym = {\r\n            acronym: this.acronymInput.value,\r\n            full_term: this.full_termInput.value,\r\n            remark: this.remarkInput.value,\r\n            language: language\r\n        };\r\n\r\n        await fetch('api/acronym/new', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newAcronym),\r\n        });\r\n\r\n        const params = this.getRequestParams(searchTerm, page, pageSize);\r\n        await this.retrieveAcronym(params);\r\n    }\r\n\r\n    async findAcronym(filterVal) {\r\n        const response = await fetch('/api/acronym/all/' + filterVal +\r\n            '?offset=' + 0 + '&limit=' + this.state.sizePerPage);\r\n        const body = await response.json();\r\n        console.log(body);\r\n        const responseSize = await fetch('/api/acronym/all/' + filterVal + '/count');\r\n        const sizeResult = await responseSize.json();\r\n        this.setState({ acronyms: body, totalSize: sizeResult, page: 1 });\r\n               \r\n    }\r\n\r\n    buttonDelete = (cell, row, rowIndex, formatExtraData) => {\r\n        return (\r\n            <Button size=\"sm\" variant=\"danger\" onClick={() => this.remove(row.id)}>Delete</Button>\r\n            )\r\n    }  \r\n\r\n    showHistory = () => {\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'Changes',\r\n        }];\r\n\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <BootstrapTable\r\n                        remote\r\n                        keyField=\"id\"\r\n                        data={[\"history 1\",\"history 2\"]}\r\n                        columns={columns}\r\n                    />\r\n\r\n                </Container>\r\n            </div>\r\n            )\r\n    }\r\n\r\n    showAddAcronym = () => {\r\n        \r\n        const handleSelect = (e) => {\r\n            console.log(e);\r\n            this.setState({ language: e });\r\n        };\r\n\r\n        let populateDropdown = languages.map(function (item, i) {\r\n            \r\n            return (\r\n                <Dropdown.Item eventKey={item} key={i}>{item}</Dropdown.Item>\r\n            )\r\n        });\r\n        \r\n        \r\n        return (\r\n            <div className=\"AddAcronymForm\">\r\n                <Form>\r\n                    <Row className=\"RowMargin\">\r\n                        <Col>\r\n                            <Form.Label>Acronym</Form.Label>\r\n                            <Form.Control placeholder=\"Acronym\" ref={input => this.acronymInput = input}/>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Label>Full Term</Form.Label>\r\n                            <Form.Control placeholder=\"Full Term\" ref={input => this.full_termInput = input} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        \r\n                        <Col>\r\n                            <Form.Label>Remarks/Comments</Form.Label>\r\n                            <Form.Control as=\"textarea\" placeholder=\"Remark\" ref={input => this.remarkInput = input}/>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"RowMargin\">\r\n                        <DropdownButton title={this.state.language} onSelect={handleSelect}>\r\n                            {populateDropdown}\r\n                        </DropdownButton>  \r\n                       \r\n                    </Row>\r\n                        <Button variant=\"success\" className=\"float-right\" onClick={() => {\r\n                        this.setState({ isAdding: false, language:\"ENGLISH\" });\r\n                        console.log(this.remarkInput.value);\r\n                        this.addNewAcronym()\r\n                        this.remarkInput.value = \"\";\r\n                        this.acronymInput.value = \"\";\r\n                        this.full_termInput.value = \"\";\r\n                        }}>Submit</Button>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleTableChange = (type, { page, sizePerPage }) => {\r\n        const { searchTerm } = this.state;\r\n        const pageSize = sizePerPage;\r\n        console.log(\"Type : \" + type);\r\n        console.log(\"page : \" + page);\r\n        console.log(\"pageSize : \" + pageSize);\r\n\r\n\r\n        if (type === 'pagination') {\r\n            const params = this.getRequestParams(searchTerm, page, pageSize);\r\n            console.log(params);\r\n            this.retrieveAcronym(params);\r\n            this.setState({ page: page, pageSize: sizePerPage });\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    onSearchTerm(e) {\r\n        var tempSearchTerm = e.target.value;\r\n        if (oldSearchId !== null) {\r\n            clearTimeout(oldSearchId);\r\n        }\r\n\r\n        const onSearchTerm = setTimeout(() => {\r\n            console.log(tempSearchTerm);\r\n            this.setState({ searchTerm: tempSearchTerm, page: 1 });\r\n\r\n            const { searchTerm, page, pageSize } = this.state;\r\n            const formattedParams = this.getRequestParams(searchTerm, page, pageSize);\r\n            this.retrieveAcronym(formattedParams);\r\n        }, 1000);\r\n\r\n        oldSearchId = onSearchTerm;\r\n\r\n    }\r\n\r\n    onSelectRow = (row, isSelect, rowIndex, e) => {\r\n        var date = new Date();\r\n        var timestamp = date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate() + \"\\t\"\r\n            + date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n\r\n        if (isSelect) {\r\n            console.log(timestamp);\r\n            this.setState(() => ({\r\n                selected: [row.id],\r\n                isSelected: true\r\n            }));\r\n        } else {\r\n            this.setState(() => ({\r\n                selected: [],\r\n                isSelected: false\r\n            }));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const { pageSize, page, totalRecords, acronyms, selected } = this.state;\r\n\r\n\r\n\r\n        const data = acronyms;\r\n        const columns = [{\r\n            dataField: 'id',\r\n            text: 'acronym id',\r\n            hidden: true\r\n        }, {\r\n                dataField: 'acronym',\r\n                text: 'Acronym',\r\n                headerStyle: () => {\r\n                    return { width: \"10%\" };\r\n                }\r\n        }, {\r\n                dataField: 'full_term',\r\n                text: 'Full Term',\r\n                headerStyle: () => {\r\n                    return { width: \"40%\" };\r\n                }\r\n        }, {\r\n                dataField: 'remark',\r\n                text: 'Remarks',\r\n                headerStyle: () => {\r\n                    return { width: \"35%\" };\r\n                }\r\n        }, {\r\n                dataField: 'language',\r\n                text: 'Language',\r\n                editable: false,\r\n                headerStyle: () => {\r\n                    return { width: \"10%\" };\r\n                }\r\n        }, {\r\n\r\n                dataField: 'actions',\r\n                text: 'Actions',\r\n                formatter: this.buttonDelete,\r\n                headerStyle: () => {\r\n                    return { width: \"5.5%\" };\r\n                }\r\n            }];\r\n\r\n        const selectRow = {\r\n            mode: 'checkbox',\r\n            hideSelectColumn: true,\r\n            clickToSelect: true,\r\n            clickToEdit: true,\r\n            bgColor: '#8CB0F9',\r\n            selected: selected,\r\n            onSelect: this.onSelectRow,\r\n        };\r\n\r\n        const DataTable = ({ data, page, sizePerPage, onTableChange, totalSize }) => (\r\n            <div>\r\n                <Container fluid>\r\n                    \r\n                    \r\n\r\n                    <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={cellEdit}\r\n                        onTableChange={onTableChange}\r\n                        selectRow={ selectRow }\r\n                    />\r\n                    \r\n                </Container>\r\n            </div>\r\n        )\r\n\r\n        const cellEdit = cellEditFactory({\r\n            mode: 'dbclick',\r\n            beforeSaveCell: (oldValue, newValue, row, column) => {\r\n                console.log(\"Old Value : \" + oldValue);\r\n                console.log(\"New Value : \" + newValue);\r\n                //console.log(\"row/elemnt ID : \" + row.id);\r\n                //console.log(\"column : \" + column.dataField);\r\n                var updatedAcronym = {\r\n                    acronym: row.acronym || '',\r\n                    full_term: row.full_term || '',\r\n                    remark: row.remark || '',\r\n                    id: row.id,\r\n                    language: row.language\r\n                }\r\n                switch (column.dataField) {\r\n                    case 'acronym':\r\n                        updatedAcronym = {\r\n                            acronym: newValue,\r\n                            full_term: row.full_term || '',\r\n                            remark: row.remark || '',\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                    case 'full_term':\r\n                        updatedAcronym = {    \r\n                            acronym: row.acronym || '',\r\n                            full_term: newValue,\r\n                            remark: row.remark || '',\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                    case 'remark':\r\n                        updatedAcronym = {\r\n                            acronym: row.acronym || '',\r\n                            full_term: row.full_term || '',\r\n                            remark: newValue,\r\n                            id: row.id,\r\n                            language: row.language\r\n                        };\r\n                        break;\r\n                }\r\n\r\n                console.log(updatedAcronym);\r\n                fetch('api/acronym/all/' + row.id, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(updatedAcronym),\r\n                });\r\n\r\n                let updatedAcronymIndex = [...this.state.acronyms].findIndex(i => i.id == row.id);\r\n                let updatedData = this.state.acronyms;\r\n                updatedData[updatedAcronymIndex] = updatedAcronym;\r\n                console.log(updatedData);\r\n                this.setState({ acronyms: updatedData });\r\n\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <h2>Acronym List</h2>\r\n                <div>\r\n                    {this.showAddAcronym()}\r\n                </div>\r\n\r\n                <div className=\"searchBar\">\r\n                    <InputBase\r\n                        type=\"text\"\r\n                        fullWidth={true}\r\n                        placeholder=\"Search by Acronym\"\r\n                        onChange={this.onSearchTerm.bind(this)}\r\n                    />\r\n                </div>\r\n                \r\n                <DataTable\r\n                    data={data}\r\n                    page={page}\r\n                    sizePerPage={pageSize}\r\n                    totalSize={totalRecords}\r\n                    onTableChange={this.handleTableChange}\r\n                />\r\n\r\n                <div>\r\n                    {this.state.isSelected ? this.showHistory() : null}\r\n                </div>\r\n            </div>\r\n            \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default AcronymList;\r\n\r\n\r\n\r\n\r\n/*\r\n     <BootstrapTable\r\n                        remote\r\n                        striped\r\n                        keyField=\"id\"\r\n                        data={data}\r\n                        columns={columns}\r\n                        pagination={paginationFactory({ page, sizePerPage, totalSize })}\r\n                        cellEdit={ cellEdit }\r\n                        onTableChange={onTableChange}\r\n                    />\r\n*/"]},"metadata":{},"sourceType":"module"}